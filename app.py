# app.py โ Arabi Psycho Telegram Bot (Tests + DSM Educational + CBT + Psychoeducation + AI Chat)
import os, logging, json
from flask import Flask, request, jsonify
import requests

# =============== ุฅุนุฏุงุฏุงุช ุนุงูุฉ ===============
BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("Missing TELEGRAM_BOT_TOKEN")
BOT_API = f"https://api.telegram.org/bot{BOT_TOKEN}"

WEBHOOK_SECRET      = os.environ.get("WEBHOOK_SECRET", "secret")
RENDER_EXTERNAL_URL = os.environ.get("RENDER_EXTERNAL_URL")

# ุฅุดุฑุงู ูุชุฑุฎูุต
SUPERVISOR_NAME  = os.environ.get("SUPERVISOR_NAME",  "ุงููุดุฑู")
SUPERVISOR_TITLE = os.environ.get("SUPERVISOR_TITLE", "ุฃุฎุตุงุฆู ููุณู")
LICENSE_NO       = os.environ.get("LICENSE_NO",       "โ")
LICENSE_ISSUER   = os.environ.get("LICENSE_ISSUER",   "โ")
CLINIC_URL       = os.environ.get("CLINIC_URL",       "")
CONTACT_PHONE    = os.environ.get("CONTACT_PHONE",    "")

# ุฅุดุนุงุฑุงุช โุชูุงุตูโ (ุงุฎุชูุงุฑู)
ADMIN_CHAT_ID = os.environ.get("ADMIN_CHAT_ID")

# ูุฒูุฏ ุงูุฐูุงุก ุงูุงุตุทูุงุนู (ูุชูุงูู ูุน OpenAI)
AI_BASE_URL = (os.environ.get("AI_BASE_URL", "") or "").rstrip("/")
AI_API_KEY  = os.environ.get("AI_API_KEY",  "")
AI_MODEL    = os.environ.get("AI_MODEL",    "")   # ูุซุงู: openrouter/anthropic/claude-3-haiku

app = Flask(__name__)
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("arabi-psycho-bot")


# =============== ุชูุงุจุน ุชูููุฌุฑุงู ===============
def tg(method, payload):
    r = requests.post(f"{BOT_API}/{method}", json=payload, timeout=15)
    if r.status_code != 200:
        log.warning("TG %s -> %s | %s", method, r.status_code, r.text[:300])
    return r

def send(chat_id, text, reply_markup=None, parse_mode="HTML"):
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": parse_mode,
        "disable_web_page_preview": True
    }
    if reply_markup:
        payload["reply_markup"] = reply_markup
    return tg("sendMessage", payload)

def inline(rows):
    return {"inline_keyboard": rows}

def reply_kb():
    # ููุญุฉ ุฃุฒุฑุงุฑ ุณูููุฉ ุซุงุจุชุฉ
    return {
        "keyboard": [
            [{"text":"ุงูุนูุงุฌ ุงูุณูููู"}, {"text":"ุงุฎุชุจุงุฑุงุช"}],
            [{"text":"ุงูุชุซููู"}, {"text":"ุชุดุฎูุต ุชุนูููู"}],
            [{"text":"ููู"}, {"text":"ุญุฒู"}],
            [{"text":"ููู"}, {"text":"ุงูุชุฆุงุจ"}],
            [{"text":"ุชูููุณ"}, {"text":"ุนุฑุจู ุณุงููู"}],
            [{"text":"ุชูุงุตู"}, {"text":"ุนู ุนุฑุจู ุณุงููู"}],
            [{"text":"ูุณุงุนุฏุฉ"}],
        ],
        "resize_keyboard": True,
        "is_persistent": True
    }

def is_cmd(txt, name): 
    return (txt or "").strip().lower().startswith("/"+name.lower())

def norm_ar(s):
    return (s or "").replace("ุฃ","ุง").replace("ุฅ","ุง").replace("ุข","ุง").strip().lower()


# =============== ุณูุงูุฉ ูุฃุฒูุงุช ===============
CRISIS_WORDS = ["ุงูุชุญุงุฑ","ุงุฐู ููุณู","ุงูุฏู ููุณู","ุงูุฏู ุฐุงุชู","ูุชู ููุณู","ูุง ุงุจุบู ุงุนูุด"]
def crisis_guard(text):
    t = norm_ar(text)
    return any(w in t for w in CRISIS_WORDS)


# =============== ูุต ุงููุธุงู ููุฐูุงุก ุงูุงุตุทูุงุนู ===============
SYSTEM_PROMPT = (
    "ุฃูุช ูุณุงุนุฏ ููุณู ุนุฑุจู ููุฏู ุชุซููููุง ูุฏุนููุง ุนุงูููุง ูุชูููุงุช CBT ุงูุจุณูุทุฉ."
    " ุชุนูู ุจุฅุดุฑุงู {name} ({title})ุ ุชุฑุฎูุต {lic_no} โ {lic_issuer}."
    " ูุฐุง ุงูุจูุช ููุณ ุจุฏูููุง ุนู ุงูุชุดุฎูุต ุฃู ูุตู ุงูุฃุฏููุฉ. ูู ุฏููููุงุ ูุชุนุงุทููุงุ ููุฎุชุตุฑูุง."
    " ูู ุญุงู ุฎุทุฑ ุนูู ุงูุณูุงูุฉ ูุฌูู ููุฑูุง ูุทูุจ ูุณุงุนุฏุฉ ุทุจูุฉ ุนุงุฌูุฉ."
).format(
    name=SUPERVISOR_NAME, title=SUPERVISOR_TITLE,
    lic_no=LICENSE_NO, lic_issuer=LICENSE_ISSUER
)

def ai_ready():
    return bool(AI_BASE_URL and AI_API_KEY and AI_MODEL)

def ai_call(messages):
    """POST {AI_BASE_URL}/v1/chat/completions (ูุงุฌูุฉ ูุชูุงููุฉ ูุน OpenAI)"""
    url = AI_BASE_URL + "/v1/chat/completions"
    headers = {"Authorization": f"Bearer {AI_API_KEY}", "Content-Type": "application/json"}
    body = {
        "model": AI_MODEL,
        "messages": messages,
        "temperature": 0.4,
        "max_tokens": 220  # ุฃูู ููุงูุชุตุงุฏ ุจุงูุฑุตุฏ
    }
    r = requests.post(url, headers=headers, json=body, timeout=30)
    if r.status_code != 200:
        raise RuntimeError(f"AI {r.status_code}: {r.text[:300]}")
    data = r.json()
    return data["choices"][0]["message"]["content"].strip()

AI_SESS = {}  # {uid: [messages...]}

def ai_start(chat_id, uid):
    if not ai_ready():
        send(chat_id, "ููุฒุฉ <b>ุนุฑุจู ุณุงููู</b> ุบูุฑ ููุนููุฉ (ุฃููู ุฅุนุฏุงุฏุงุช AI).", reply_kb()); return
    AI_SESS[uid] = [{"role":"system","content": SYSTEM_PROMPT}]
    send(chat_id,
         f"ุจุฏุฃูุง ุฌูุณุฉ <b>ุนุฑุจู ุณุงููู</b> ๐ค ุจุฅุดุฑุงู {SUPERVISOR_NAME} ({SUPERVISOR_TITLE}).\n"
         "ุงูุชุจ ุณุคุงูู ุนู ุงูููู/ุงูููู/CBTโฆ\n"
         "ูุฅููุงุก ุงูุฌูุณุฉ: ุงูุชุจ <code>ุงููุงุก</code>.",
         reply_kb())

def ai_end(chat_id, uid):
    AI_SESS.pop(uid, None)
    send(chat_id, "ุชู ุฅููุงุก ุฌูุณุฉ ุนุฑุจู ุณุงููู โ", reply_kb())

def ai_handle(chat_id, uid, user_text):
    if crisis_guard(user_text):
        send(chat_id,
             "ุฃูุฏูุฑ ุดุนูุฑูุ ูุณูุงูุชู ุฃูู ุดูุก ุงูุขู.\n"
             "ุฅู ููุฌุฏุช ุฃููุงุฑ ูุฅูุฐุงุก ุงูููุณ ูุงุชุตู ุจุงูุทูุงุฑุฆ ููุฑูุง ุฃู ุชูุฌูู ูุฃูุฑุจ ุทูุงุฑุฆ.",
             reply_kb()); return
    msgs = AI_SESS.get(uid) or [{"role":"system","content": SYSTEM_PROMPT}]
    msgs = msgs[-16:]
    msgs.append({"role":"user","content": user_text})
    try:
        reply = ai_call(msgs)
    except Exception as e:
        send(chat_id,
             "ูุชุนุฐูุฑ ุงูุงุชุตุงู ุจุงูุฐูุงุก ุงูุงุตุทูุงุนู.\n"
             f"{e}\nุชู ุชูููู ุทูู ุงูุฑุฏูุฏ ุชููุงุฆููุง. ุฌุฑูุจ ูุงุญููุง ุฃู ุงุดุญู ุฑุตูุฏ OpenRouter.",
             reply_kb()); return
    msgs.append({"role":"assistant","content": reply})
    AI_SESS[uid] = msgs[-18:]
    send(chat_id, reply, reply_kb())


# =============== ุงุฎุชุจุงุฑุงุช ููุณูุฉ (GAD-7 / PHQ-9) ===============
ANS = [("ุฃุจุฏูุง",0), ("ุนุฏุฉ ุฃูุงู",1), ("ุฃูุซุฑ ูู ุงููุตู",2), ("ุชูุฑูุจูุง ูููููุง",3)]

G7 = [
    "ุงูุชูุชุฑ/ุงูุนุตุจูุฉ ุฃู ุงูุดุนูุฑ ุจุงูููู",
    "ุนุฏู ุงููุฏุฑุฉ ุนูู ุงูุชููู ุนู ุงูููู ุฃู ุงูุณูุทุฑุฉ ุนููู",
    "ุงูุงูุดุบุงู ุจุงููููู ุจุฏุฑุฌุฉ ูุจูุฑุฉ",
    "ุตุนูุจุฉ ุงูุงุณุชุฑุฎุงุก",
    "ุชูููู/ุตุนูุจุฉ ุงูุฌููุณ ุจูุฏูุก",
    "ุงูุงูุฒุนุงุฌ ุจุณุฑุนุฉ ุฃู ุงูุนุตุจูุฉ",
    "ุงูุฎูู ูู ุญุฏูุซ ุดูุก ุณูุฆ"
]
PHQ9 = [
    "ููุฉ ุงูุงูุชูุงู ุฃู ุงููุชุนุฉ ุจุงูููุงู ุจุงูุฃุดูุงุก",
    "ุงูุดุนูุฑ ุจุงูุญุฒู ุฃู ุงูุงูุชุฆุงุจ ุฃู ุงููุฃุณ",
    "ูุดุงูู ูู ุงูููู ุฃู ุงูููู ูุซูุฑูุง",
    "ุงูุฅุฑูุงู ุฃู ููุฉ ุงูุทุงูุฉ",
    "ุถุนู ุงูุดููุฉ ุฃู ุงูุฅูุฑุงุท ูู ุงูุฃูู",
    "ุงูุดุนูุฑ ุจุชุฏููู ุชูุฏูุฑ ุงูุฐุงุช ุฃู ุงูุฐูุจ",
    "ุตุนูุจุฉ ุงูุชุฑููุฒ",
    "ุงูุญุฑูุฉ/ุงูููุงู ุจุจุทุก ุดุฏูุฏ ุฃู ุจุนุตุจูุฉ ุฒุงุฆุฏุฉ",
    "ุฃููุงุฑ ุจุฃูู ุณุชููู ุฃูุถู ุญุงููุง ูู ูู ุชูู ููุฌูุฏูุง"
]
TESTS = {"g7":{"name":"ูููุงุณ ุงูููู GAD-7","q":G7}, "phq":{"name":"ูููุงุณ ุงูุงูุชุฆุงุจ PHQ-9","q":PHQ9}}

SESS_TEST = {}  # {uid: {"key":, "i":, "score":}}

def tests_menu(chat_id):
    send(chat_id, "ุงุฎุชุฑ ุงุฎุชุจุงุฑูุง:", inline([
        [{"text":"ุงุฎุชุจุงุฑ ุงูููู (GAD-7)","callback_data":"t:g7"}],
        [{"text":"ุงุฎุชุจุงุฑ ุงูุงูุชุฆุงุจ (PHQ-9)","callback_data":"t:phq"}],
    ]))

def test_start(chat_id, uid, key):
    data = TESTS[key]
    SESS_TEST[uid] = {"key":key, "i":0, "score":0}
    send(chat_id, f"ุณูุจุฏุฃ: <b>{data['name']}</b>\nุฃุฌุจ ุญุณุจ ุขุฎุฑ ุฃุณุจูุนูู.", reply_kb())
    test_ask(chat_id, uid)

def test_ask(chat_id, uid):
    st = SESS_TEST.get(uid)
    if not st: return
    key, i = st["key"], st["i"]; qs = TESTS[key]["q"]
    if i >= len(qs):
        score = st["score"]; total = len(qs)*3
        send(chat_id, f"ุงููุชูุฌุฉ: <b>{score}</b> ูู {total}\n{test_interpret(key,score)}", reply_kb())
        SESS_TEST.pop(uid, None); return
    q = qs[i]
    send(chat_id, f"ุณ{ i+1 }: {q}", inline([
        [{"text":ANS[0][0],"callback_data":"qa0"}, {"text":ANS[1][0],"callback_data":"qa1"}],
        [{"text":ANS[2][0],"callback_data":"qa2"}, {"text":ANS[3][0],"callback_data":"qa3"}],
    ]))

def test_record(chat_id, uid, idx):
    st = SESS_TEST.get(uid)
    if not st: return
    st["score"] += ANS[idx][1]
    st["i"] += 1
    test_ask(chat_id, uid)

def test_interpret(key, score):
    if key=="g7":
        lvl = "ุถุฆูู" if score<=4 else ("ุฎููู" if score<=9 else ("ูุชูุณุท" if score<=14 else "ุดุฏูุฏ"))
        return f"<b>ูุคุดุฑุงุช ููู {lvl}</b> (ุชุนูููู).\nูุตูุญุฉ: ุชูููุณ ุจุจุทุกุ ูููู ุงููุงููููุ ูุซุจูุช ูููู."
    if key=="phq":
        if score<=4: lvl="ุถุฆูู"
        elif score<=9: lvl="ุฎููู"
        elif score<=14: lvl="ูุชูุณุท"
        elif score<=19: lvl="ูุชูุณุท ุฅูู ุดุฏูุฏ"
        else: lvl="ุดุฏูุฏ"
        return f"<b>ูุคุดุฑุงุช ุงูุชุฆุงุจ {lvl}</b> (ุชุนูููู).\nูุตูุญุฉ: ุชูุดูุท ุณูููู + ุฑูุชูู ููู + ุชูุงุตู ุงุฌุชูุงุนู."
    return "ุชู."


# =============== โุชุดุฎูุต ุชุนููููโ DSM-5 (ูุจุณูุท) ===============
# โ ุชูุจูู: ุงููุชุงุฆุฌ ุชุนููููุฉ ูููุณุช ุชุดุฎูุตูุง ุทุจููุง โ
DSM_SESS = {}  # {uid: {"key":, "i":, "hits":, "flags":{...}}}

MDD_SYMPTOMS = [
    ("ูุฒุงุฌ ููุชุฆุจ ูุนุธู ุงูููู", "mood"),
    ("ููุฏุงู ุงูุงูุชูุงู ุฃู ุงููุชุนุฉ ุจูุนุธู ุงูุฃูุดุทุฉ", "anhedonia"),
    ("ุชุบูุฑ ููุญูุธ ูู ุงููุฒู/ุงูุดููุฉ", "appetite"),
    ("ุฃุฑู ุฃู ููู ููุฑุท ุชูุฑูุจูุง ูููููุง", "sleep"),
    ("ุชุจุงุทุค ุญุฑูู ุฃู ุชูุชุฑ ุฒุงุฆุฏ ููุญูุธ", "psychomotor"),
    ("ุฅุฑูุงู ุฃู ููุฏุงู ุงูุทุงูุฉ", "fatigue"),
    ("ูุดุงุนุฑ ุฐูุจ ููุฑุทุฉ ุฃู ุนุฏููุฉ ุงููููุฉ", "guilt"),
    ("ุถุนู ุงูุชุฑููุฒ ุฃู ุงูุชุฑุฏุฏ", "concentration"),
    ("ุฃููุงุฑ ูุชูุฑุฑุฉ ุนู ุงูููุช/ุฅูุฐุงุก ุงูููุณ", "si"),
]
GAD_SYMPTOMS = [
    ("ุชูุชุฑ/ุงุณุชุซุงุฑุฉ ุจุณูููุฉ", "irritable"),
    ("ุฅุฌูุงุฏ/ุฅุฑูุงู ุณุฑูุน", "fatigue"),
    ("ุตุนูุจุฉ ุงูุชุฑููุฒ ุฃู ุดุฑูุฏ ุงูุฐูู", "focus"),
    ("ุดุฏู ุนุถูู", "muscle"),
    ("ุงุถุทุฑุงุจ ุงูููู", "sleep"),
    ("ุชูููู/ุดุนูุฑ ุฏุงุฎูู ุจุนุฏู ุงูุงุฑุชูุงุญ", "restless"),
]

def dsm_menu(chat_id):
    send(chat_id, "ุงุฎุชุฑ ูุญุตูุง ุชุนูููููุง (DSM-5 ูุจุณูุท):", inline([
        [{"text":"ุงูุชุฆุงุจ (ุชุนูููู)","callback_data":"d:mdd"}],
        [{"text":"ููู ุนุงู (ุชุนูููู)","callback_data":"d:gad"}],
        [{"text":"ุชูุจูู ูุงู","callback_data":"d:note"}],
    ]))

def dsm_note(chat_id):
    send(chat_id,
         "ูุฐู ุงููุญูุตุงุช <b>ุชุนููููุฉ</b> ููุณุงุนุฏุชู ุนูู ููู ุงููุนุงููุฑ ููุง ุชูุนุฏ ุชุดุฎูุตูุง.\n"
         "ุฅู ุชูุทุจู ุนููู ูุคุดุฑุงุช ูุซูุฑุฉุ ูุงุณุชุดุฑ ูุฎุชุตูุง ูุฑุฎูุตูุง ูุชูููู ูููู.", reply_kb())

def dsm_start(chat_id, uid, key):
    if key=="mdd":
        DSM_SESS[uid] = {"key":"mdd","i":0,"hits":0,"flags":{"mood":False,"anhedonia":False}}
        send(chat_id, "ุฎูุงู <b>ุขุฎุฑ ุฃุณุจูุนูู</b> ุชูุฑูุจูุง ูู ูููโฆ ุฃุฌุจ ุจู ูุนู/ูุง:", reply_kb())
        dsm_ask(chat_id, uid)
    elif key=="gad":
        DSM_SESS[uid] = {"key":"gad","i":0,"hits":0,"flags":{"duration6m":False}}
        # ุณุคุงู ูุฏุฉ ุงูููู ุฃูููุง
        send(chat_id, "ูู ููุช ุชุนุงูู ูู ููู ููููู ุฒุงุฆุฏ <b>ุฃุบูุจ ุงูุฃูุงู ููุฏุฉ 6 ุฃุดูุฑ+</b>ุ", inline([
            [{"text":"ูุนู","callback_data":"dy"}, {"text":"ูุง","callback_data":"dn"}]
        ]))
    else:
        dsm_note(chat_id)

def dsm_ask(chat_id, uid):
    st = DSM_SESS.get(uid)
    if not st: return
    if st["key"]=="mdd":
        i = st["i"]
        if i >= len(MDD_SYMPTOMS):
            # ุชูุณูุฑ ุชุนูููู
            hits = st["hits"]
            mood_ok = st["flags"].get("mood",False) or st["flags"].get("anhedonia",False)
            msg = ["<b>ูุชูุฌุฉ ุชุนููููุฉ ูุง ุชูุนุฏ ุชุดุฎูุตูุง:</b>"]
            if hits >= 5 and mood_ok:
                msg.append("ูุฏ ุชูุทุจู <b>ุจุนุถ</b> ูุนุงููุฑ ููุจุฉ ุงูุชุฆุงุจ ุฌุณููุฉ. ููุณุชุญุณู ุทูุจ ุชูููู ูููู.")
            else:
                msg.append("ูุง ุชููู ุงููุคุดุฑุงุช ุงูุญุงููุฉ ููุทุงุจูุฉ ุงููุนุงููุฑ ุจุดูู ุชุนูููู.")
            msg.append("ูู ูุฏูู ุฃููุงุฑ ุฅูุฐุงุก ุงูููุณ ูุงุชุตู ุจุงูุทูุงุฑุฆ ููุฑูุง.")
            send(chat_id, "\n".join(msg), reply_kb()); DSM_SESS.pop(uid,None); return
        text, code = MDD_SYMPTOMS[i]
        send(chat_id, text, inline([
            [{"text":"ูุนู","callback_data":"dy"}, {"text":"ูุง","callback_data":"dn"}]
        ]))
    elif st["key"]=="gad":
        # ุจุนุฏ ุณุคุงู ุงููุฏุฉุ ูุณุฃู ุงูุฃุนุฑุงุถ ุงูุณุชุฉ
        i = st["i"]
        if i >= len(GAD_SYMPTOMS):
            hits = st["hits"]; dur = st["flags"].get("duration6m",False)
            msg = ["<b>ูุชูุฌุฉ ุชุนููููุฉ ูุง ุชูุนุฏ ุชุดุฎูุตูุง:</b>"]
            if dur and hits >= 3:
                msg.append("ูุฏ ุชูุทุจู <b>ุจุนุถ</b> ูุคุดุฑุงุช ุงุถุทุฑุงุจ ุงูููู ุงูุนุงู. ููุณุชุญุณู ุทูุจ ุชูููู ูููู.")
            else:
                msg.append("ูุง ุชููู ุงููุคุดุฑุงุช ุงูุญุงููุฉ ููุทุงุจูุฉ ุงููุนุงููุฑ ุจุดูู ุชุนูููู.")
            send(chat_id, "\n".join(msg), reply_kb()); DSM_SESS.pop(uid,None); return
        text, code = GAD_SYMPTOMS[i]
        send(chat_id, text, inline([
            [{"text":"ูุนู","callback_data":"dy"}, {"text":"ูุง","callback_data":"dn"}]
        ]))

def dsm_record(chat_id, uid, yes):
    st = DSM_SESS.get(uid)
    if not st: return
    k = st["key"]
    if k=="gad" and st["i"]==0 and "duration6m" in st["flags"] and st["flags"]["duration6m"] is False:
        # ูุฐุง ุญุฏุซ ูู ุถุบุท ูุจู ุฃู ูููุฆุ ูุชุฌุงูู
        pass
    if k=="gad" and st["flags"].get("duration6m") is False and st["i"]==0 and "asked_duration" not in st["flags"]:
        # ุฃูู ูุจุณุฉ ุจุนุฏ ุณุคุงู ุงููุฏุฉ
        st["flags"]["asked_duration"] = True
        st["flags"]["duration6m"] = bool(yes)
        # ูุง ูุฒูุฏ i ููุงุ ูุจุฏุฃ ุงูุฃุนุฑุงุถ ุงูุขู ูู 0
        dsm_ask(chat_id, uid); return

    if k=="mdd":
        i = st["i"]; text, code = MDD_SYMPTOMS[i]
        if yes:
            st["hits"] += 1
            if code in ("mood","anhedonia"):
                st["flags"][code] = True
        st["i"] += 1
        dsm_ask(chat_id, uid); return

    if k=="gad":
        i = st["i"]; text, code = GAD_SYMPTOMS[i]
        if yes: st["hits"] += 1
        st["i"] += 1
        dsm_ask(chat_id, uid); return


# =============== CBT + ุชุซููู + ุจุฑูุชููููุงุช ุณุฑูุนุฉ ===============
CBT_ITEMS = [
    ("ุฃุฎุทุงุก ุงูุชูููุฑ", "cd"),
    ("ุงูุงุฌุชุฑุงุฑ ูุงููุจุช", "rum"),
    ("ุงูุฃุณุฆูุฉ ุงูุนุดุฑุฉ", "q10"),
    ("ุงูุงุณุชุฑุฎุงุก", "rlx"),
    ("ุงูุชูุดูุท ุงูุณูููู", "ba"),
    ("ุงูููุธุฉ ุงูุฐูููุฉ", "mind"),
    ("ุญู ุงููุดููุงุช", "ps"),
    ("ุณููููุงุช ุงูุฃูุงู", "safe"),
]
def cbt_menu(chat_id):
    rows=[]
    for i in range(0,len(CBT_ITEMS),2):
        pair = [{"text":t,"callback_data":"c:"+d} for (t,d) in CBT_ITEMS[i:i+2]]
        rows.append(pair)
    send(chat_id, "ุงุฎุชุฑ ููุถูุน ุงูุนูุงุฌ ุงูุณูููู:", inline(rows))

def cbt_text(code):
    if code=="cd":
        return [
            "<b>ุฃุฎุทุงุก ุงูุชูููุฑ</b>: ุงูุฃุจูุถ/ุงูุฃุณูุฏุ ุงูุชุนูููุ ูุฑุงุกุฉ ุงูุฃููุงุฑุ ุงูุชูุจุคุ ุงูุชููููโฆ",
            "ุงูุฎุทูุงุช: ูก) ุงูุชูุท ุงูููุฑุฉ ูข) ุงูุฏููู ูุนูุง/ุถุฏูุง ูฃ) ุตูุงุบุฉ ูุชูุงุฒูุฉ."
        ]
    if code=="rum":
        return ["<b>ุงูุงุฌุชุฑุงุฑ ูุงููุจุช</b>", "ุณููู ุงูููุฑุฉุ ุญุฏูุฏ ยซููุช ูููยปุ ุญููู ููุดุงุท ุจุณูุท."]
    if code=="q10":
        return ["<b>ุงูุฃุณุฆูุฉ ุงูุนุดุฑุฉ</b>", "ุงูุฏูููุ ุงูุจุฏุงุฆูุ ูู ุตุฏูู ููุงููุ ุฃุณูุฃ/ุฃูุถู/ุฃุฑุฌุญุ ูู ุฃุนูููุ"]
    if code=="rlx":
        return ["<b>ุงูุงุณุชุฑุฎุงุก</b>", "ุชูููุณ 4-7-8 ร6. ุดุฏู/ุฅุฑุฎ ุงูุนุถูุงุช ูู ุงููุฏู ููุฑุฃุณ."]
    if code=="ba":
        return ["<b>ุงูุชูุดูุท ุงูุณูููู</b>", "ูุดุงุทุงู ุตุบูุฑุงู ูููููุง (ููุชุน/ูุงูุน) + ูุงุนุฏุฉ 5 ุฏูุงุฆู + ุชูููู ูุฒุงุฌ ูุจู/ุจุนุฏ."]
    if code=="mind":
        return ["<b>ุงูููุธุฉ ุงูุฐูููุฉ</b>", "ุชูุฑูู 5-4-3-2-1 ููุญูุงุณ. ูุงุญุธ ูู ุฏูู ุญูู."]
    if code=="ps":
        return ["<b>ุญู ุงููุดููุงุช</b>", "ุนุฑูู ุงููุดููุฉ โ ุจุฏุงุฆู โ ุฎุทุฉ ุตุบูุฑุฉ SMART โ ุฌุฑูุจ โ ูููู."]
    if code=="safe":
        return ["<b>ุณููููุงุช ุงูุฃูุงู</b>", "ูููู ุงูุทูุฃูุฉ/ุงูุชุฌูุจ ุชุฏุฑูุฌููุง ูุน ุชุนุฑูุถ ุขูู."]
    return ["ุชู."]

def cbt_send(chat_id, code):
    for t in cbt_text(code):
        send(chat_id, t, reply_kb())

PSYCHOEDU = {
    "anx": [
        "<b>ุนู ุงูููู</b>",
        "ูููุฏ ุจูุฏุฑู ูุนุชุฏูุ ููุตุจุญ ูุดููุฉ ุนูุฏ ุงูุงุณุชูุฑุงุฑ ูุงูุดุฏูุฉ.",
        "ุนูุงูู ูุณุงุนุฏุฉ: ุชูููู ูุงููููุ ูุดุงุท ุจุฏููุ ููู ููุชุธูุ ุชุนุฑูุถ ุชุฏุฑูุฌู ููููุงูู."
    ],
    "dep": [
        "<b>ุนู ุงูุงูุชุฆุงุจ</b>",
        "ููุณู ุงููุฒุงุฌ ูุงูุทุงูุฉ ูุงูููู ูุงูุดููุฉ.",
        "ุงููููุฏ: ุชูุดูุท ุณููููุ ุชูุงุตู ุงุฌุชูุงุนูุ ููููุฉ ุงููููุ ุทูุจ ุฏุนู ูููู ุนูุฏ ุงูุดุฏุฉ."
    ],
    "sleep": [
        "<b>ูุธุงูุฉ ุงูููู</b>",
        "ุซุจูุช ุงูุงุณุชููุงุธ ูููููุงุ ูููู ุงูุดุงุดุงุช ููููุงุ ุณุฑูุฑ=ููู ููุทุ ุทููุณ ุชูุฏุฆุฉ 30โ45ุฏ."
    ],
    "panic": [
        "<b>ููุจุงุช ุงูููุน</b>",
        "ุบูุฑ ุฎุทุฑุฉ ุนุงุฏุฉ ููููุง ููุฎููุฉ. ุชุนููู ุงูุชููุณ ุงูุจุทูุก ูููุงุฌูุฉ ุงูุฃุญุงุณูุณ ุชุฏุฑูุฌููุง."
    ],
}
def edu_menu(chat_id):
    send(chat_id, "ููุงุถูุน ุงูุชุซููู:", inline([
        [{"text":"ุงูููู","callback_data":"e:anx"}, {"text":"ุงูุงูุชุฆุงุจ","callback_data":"e:dep"}],
        [{"text":"ููู","callback_data":"e:sleep"}, {"text":"ููุจุงุช ุงูููุน","callback_data":"e:panic"}],
    ]))
def edu_send(chat_id, key):
    for p in PSYCHOEDU.get(key,["ุชู."]):
        send(chat_id, p, reply_kb())

THERAPY = {
    "sleep":
        "<b>ุจุฑูุชูููู ุงูููู (ูุฎุชุตุฑ)</b>\nโข ุซุจูุช ุงูุงุณุชููุงุธ ูููููุง\nโข ูููู ุงูุดุงุดุงุช ูุณุงุกู\nโข ุทููุณ ุชูุฏุฆุฉ 30โ45ุฏ\nโข ุณุฑูุฑ=ููู ููุท\nโข ูู ูุง ููุช ุฎูุงู 20ุฏ ุงุฎุฑุฌ ููุดุงุท ูุงุฏุฆ ูุงุฑุฌุน.",
    "sad":
        "<b>ุนูุงุฌ ุงูุญุฒู (ุชูุดูุท ุณูููู)</b>\nโข 3 ุฃูุดุทุฉ ุตุบูุฑุฉ ุงูููู (ููุชุน/ูุงูุน/ุงุฌุชูุงุนู)\nโข ุงุจุฏุฃ ุจู10โ20ุฏ\nโข ูููู ุงููุฒุงุฌ ูุจู/ุจุนุฏ.",
    "anx":
        "<b>ููู (ุณุฑูุน)</b>\nโข ุชูููุณ 4-4-6 ร10\nโข ูุงุฆูุฉ ููุงูู ูุฎููุฉ โ ุชุฏุฑูุฌ\nโข ูููู ุงูุทูุฃูุฉ ูุงููููุฉ."
}


# =============== ุตูุญุงุช ูููุจููู ===============
@app.get("/")
def home():
    return jsonify({
        "app": "Arabi Psycho Telegram Bot",
        "public_url": RENDER_EXTERNAL_URL,
        "webhook": f"/webhook/{WEBHOOK_SECRET[:3]}*****",
        "ai_ready": ai_ready(),
        "supervisor": {
            "name": SUPERVISOR_NAME, "title": SUPERVISOR_TITLE,
            "license": f"{LICENSE_NO} โ {LICENSE_ISSUER}"
        }
    })

@app.get("/setwebhook")
def set_hook():
    if not RENDER_EXTERNAL_URL:
        return jsonify({"ok": False, "error": "RENDER_EXTERNAL_URL not set"}), 400
    url = f"{RENDER_EXTERNAL_URL}/webhook/{WEBHOOK_SECRET}"
    res = requests.post(f"{BOT_API}/setWebhook", json={"url": url}, timeout=15)
    return res.json(), res.status_code

@app.post(f"/webhook/{WEBHOOK_SECRET}")
def webhook():
    upd = request.get_json(force=True, silent=True) or {}

    # ==== Callback ====
    if "callback_query" in upd:
        cq   = upd["callback_query"]
        data = cq.get("data","")
        chat_id = cq["message"]["chat"]["id"]
        uid     = cq["from"]["id"]

        # ุงุฎุชุจุงุฑุงุช
        if data.startswith("t:"):
            key = data.split(":",1)[1]
            if key in TESTS: test_start(chat_id, uid, key)
            else: send(chat_id, "ุงุฎุชุจุงุฑ ุบูุฑ ูุนุฑูู.", reply_kb())
            return "ok", 200
        if data.startswith("qa"):
            try:
                idx = int(data[2:])
                if 0 <= idx <= 3: test_record(chat_id, uid, idx)
            except: send(chat_id, "ุฅุฌุงุจุฉ ุบูุฑ ุตุงูุญุฉ.", reply_kb())
            return "ok", 200

        # CBT
        if data.startswith("c:"):
            c = data.split(":",1)[1]
            cbt_send(chat_id, c);  return "ok", 200

        # ุชุซููู
        if data.startswith("e:"):
            k = data.split(":",1)[1]
            edu_send(chat_id, k); return "ok", 200

        # DSM ุชุนูููู
        if data.startswith("d:"):
            k = data.split(":",1)[1]
            if k=="note": dsm_note(chat_id)
            else: dsm_start(chat_id, uid, k)
            return "ok", 200
        if data in ("dy","dn"):
            dsm_record(chat_id, uid, data=="dy"); return "ok", 200

        return "ok", 200

    # ==== Messages ====
    msg = upd.get("message") or upd.get("edited_message") or {}
    if not msg: return "ok", 200
    chat_id = msg["chat"]["id"]
    text    = (msg.get("text") or "").strip()
    low     = norm_ar(text)
    uid     = msg.get("from",{}).get("id")

    # ุฌูุณุฉ AI ูุนูุงูุฉุ
    if uid in AI_SESS and low != "ุงููุงุก":
        ai_handle(chat_id, uid, text);  return "ok", 200
    if low == "ุงููุงุก":
        ai_end(chat_id, uid); return "ok", 200

    # ุฃูุงูุฑ
    if is_cmd(text, "start"):
        start_msg(chat_id); return "ok", 200
    if is_cmd(text, "menu"):
        send(chat_id, "ุงููุงุฆูุฉ:", reply_kb()); return "ok", 200
    if is_cmd(text, "help"):
        send(chat_id,
             "ุงูุฃูุงูุฑ: /menu ููุฃุฒุฑุงุฑ โข /tests ููุงุฎุชุจุงุฑุงุช โข /cbt ููุนูุงุฌ ุงูุณูููู โข /about ูููุนูููุงุช.\n"
             "ุงูุชุจ: ุนุฑุจู ุณุงููู ูุจุฏุก ูุญุงุฏุซุฉ ุงูุฐูุงุก ุงูุงุตุทูุงุนู.",
             reply_kb()); return "ok", 200
    if is_cmd(text, "tests"):
        tests_menu(chat_id); return "ok", 200
    if is_cmd(text, "cbt"):
        cbt_menu(chat_id); return "ok", 200
    if is_cmd(text, "about"):
        about_msg(chat_id); return "ok", 200
    # ูุญุต ุฅุนุฏุงุฏุงุช AI (ููุงุฎุชุจุงุฑ)
    if is_cmd(text, "ai_diag"):
        send(chat_id, f"ai_ready={ai_ready()} | BASE={bool(AI_BASE_URL)} | KEY={bool(AI_API_KEY)} | MODEL={AI_MODEL or '-'}")
        return "ok", 200

    # ุชูุงุตู
    if low in ("ุชูุงุตู","ุชูุงุตู.","ุทูุจ ุชูุงุตู"):
        user = msg.get("from",{})
        username = user.get("username") or (user.get("first_name","")+" "+user.get("last_name","")).strip() or "ูุณุชุฎุฏู"
        send(chat_id, "ุชู ุชุณุฌูู ุทูุจ ุชูุงุตู โ ุณูุฑุฌุน ูู ูุฑูุจูุง.", reply_kb())
        if ADMIN_CHAT_ID:
            info = (f"๐ฉ ุทูุจ ุชูุงุตู\n"
                    f"ุงุณู: {username} (user_id={user.get('id')})\n"
                    f"ูุต: {(text or '')}")
            tg("sendMessage", {"chat_id": ADMIN_CHAT_ID, "text": info})
        return "ok", 200

    # ุฃุฒุฑุงุฑ ุณุฑูุนุฉ ุจุงููุต
    if low in ("ุงุฎุชุจุงุฑุงุช",):
        tests_menu(chat_id); return "ok", 200
    if low in ("ุงูุนูุงุฌ ุงูุณูููู","ุนูุงุฌ ุณูููู"):
        cbt_menu(chat_id); return "ok", 200
    if low in ("ุงูุชุซููู",):
        edu_menu(chat_id); return "ok", 200
    if low in ("ุชุดุฎูุต ุชุนูููู","ุงูุชุดุฎูุต ุงูุชุนูููู","ุชุดุฎูุต"):
        dsm_menu(chat_id); return "ok", 200

    if low in ("ููู",):
        send(chat_id, THERAPY["sleep"], reply_kb()); return "ok", 200
    if low in ("ุญุฒู",):
        send(chat_id, THERAPY["sad"], reply_kb()); return "ok", 200
    if low in ("ููู",):
        send(chat_id, THERAPY["anx"], reply_kb()); return "ok", 200
    if low in ("ุงูุชุฆุงุจ",):
        send(chat_id, "ููุงูุชุฆุงุจ: ุฌุฑูุจ ุงูุชูุดูุท ุงูุณูููู ูุชูุงุตููุง ุงุฌุชูุงุนููุง ุฎููููุง. ูููููู ุฅุฌุฑุงุก PHQ-9 ูู ุฒุฑ ยซุงุฎุชุจุงุฑุงุชยป.", reply_kb()); return "ok", 200
    if low in ("ุชููุณ","ุชูููุณ"):
        send(chat_id, "ุชูููุณ 4-4-6 ร10: ุดููู 4ุ ุญุจุณ 4ุ ุฒููุฑ 6. ูุฑูุฑ ุจุจุทุก.", reply_kb()); return "ok", 200

    if low in ("ุนุฑุจู ุณุงููู","ุฐูุงุก ุงุตุทูุงุนู","ุงูู ุงู","arabipsycho","arabi psycho"):
        ai_start(chat_id, uid); return "ok", 200

    if low in ("ุนู ุนุฑุจู ุณุงููู","ุนู","about arabi"):
        about_msg(chat_id); return "ok", 200

    if low in ("ูุณุงุนุฏุฉ","help","?"):
        send(chat_id,
             "ุฃูุง ูุณุงุนุฏ ููุณู ููุชุซููู ูุงูุฏุนู ุงูุนุงู.\n"
             "ุฌุฑูุจ: ยซุงุฎุชุจุงุฑุงุชยปุ ยซุงูุนูุงุฌ ุงูุณููููยปุ ยซุงูุชุซูููยปุ ยซุชุดุฎูุต ุชุนููููยปุ ุฃู ยซุนุฑุจู ุณุงูููยป.",
             reply_kb()); return "ok", 200

    # ุงูุชุฑุงุถู: ุฑุฏู ููุฌูู
    if ai_ready():
        send(chat_id, "ุฃูุชุจ ยซุนุฑุจู ุณุงูููยป ูุจุฏุก ูุญุงุฏุซุฉ ุฐููุฉุ ุฃู /menu ูุนุฑุถ ุงูุฃุฒุฑุงุฑ.", reply_kb())
    else:
        send(chat_id, "ุงูุชุจ /menu ูุนุฑุถ ุงูุฃุฒุฑุงุฑ.", reply_kb())
    return "ok", 200


# =============== ุฑุณุงุฆู ุซุงุจุชุฉ ===============
def start_msg(chat_id):
    about_msg(chat_id)
    send(chat_id,
         "ุฃูุงูุฑ ุณุฑูุนุฉ: /menu โข /tests โข /cbt โข /about\n"
         "ุฒุฑ ยซุนุฑุจู ุณุงูููยป ูุจุฏุก ูุญุงุฏุซุฉ ุจุงูุฐูุงุก ุงูุงุตุทูุงุนู.",
         reply_kb())

def about_msg(chat_id):
    lines = [
        "<b>ุนุฑุจู ุณุงููู</b> ๐ค",
        f"ูุดุบููู ุจุฅุดุฑุงู {SUPERVISOR_NAME} ({SUPERVISOR_TITLE})",
        f"ุงูุชุฑุฎูุต: {LICENSE_NO} โ {LICENSE_ISSUER}",
        "ุงูุบุฑุถ: ุชุซููู ูุฏุนู ุนุงู (CBT) โ ููุณ ุจุฏูููุง ุนู ุชุดุฎูุต ุฃู ูุตูุฉ ุฏูุงุฆูุฉ.",
        "ููุทูุงุฑุฆ: ุชูุงุตู ูุน ุงูุฌูุงุช ุงููุฎุชุตุฉ ููุฑูุง."
    ]
    if CONTACT_PHONE: lines.append(f"ุฑูู ุงูุชูุงุตู: {CONTACT_PHONE}")
    if CLINIC_URL:    lines.append(f"ุงููููุน: {CLINIC_URL}")
    send(chat_id, "\n".join(lines), reply_kb())


# =============== ุชุดุบูู ูุญูู ===============
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 8000)))
