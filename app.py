# app.py โ Arabi Psycho Telegram Bot (CBT + Education + Tests + AI)
import os, logging, json
from flask import Flask, request, jsonify
import requests

# ========= Config =========
BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("Missing TELEGRAM_BOT_TOKEN")
BOT_API = f"https://api.telegram.org/bot{BOT_TOKEN}"

WEBHOOK_SECRET     = os.environ.get("WEBHOOK_SECRET", "secret")
RENDER_EXTERNAL_URL= os.environ.get("RENDER_EXTERNAL_URL", "")

# Contact/Admin
ADMIN_CHAT_ID = os.environ.get("ADMIN_CHAT_ID")
CONTACT_PHONE = os.environ.get("CONTACT_PHONE")  # ูุซู: +9665xxxxxxxx

# Supervision (ูุธูุฑ ูู /help)
SUPERVISOR_NAME  = os.environ.get("SUPERVISOR_NAME", "ุฃุฎุตุงุฆู ููุณู ูุฑุฎูุต")
SUPERVISOR_TITLE = os.environ.get("SUPERVISOR_TITLE", "MS, CBT")
LICENSE_NO       = os.environ.get("LICENSE_NO", "โ")
LICENSE_ISSUER   = os.environ.get("LICENSE_ISSUER", "ูุฒุงุฑุฉ ุงูุตุญุฉ")

# AI (OpenAI-compatible โข ููุถูู OpenRouter)
AI_BASE_URL = os.environ.get("AI_BASE_URL", "").rstrip("/") or "https://openrouter.ai/api"
AI_API_KEY  = os.environ.get("AI_API_KEY", "")
AI_MODEL    = os.environ.get("AI_MODEL", "openrouter/auto")

app = Flask(__name__)
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("arabi-psycho")

# ========= Telegram helpers =========
def tg(method, payload):
    r = requests.post(f"{BOT_API}/{method}", json=payload, timeout=20)
    if r.status_code != 200:
        log.warning("TG %s -> %s | %s", method, r.status_code, r.text[:300])
    return r

def send(chat_id, text, reply_markup=None, parse_mode="HTML"):
    payload = {"chat_id": chat_id, "text": text, "parse_mode": parse_mode, "disable_web_page_preview": True}
    if reply_markup: payload["reply_markup"] = reply_markup
    return tg("sendMessage", payload)

def inline(rows):
    return {"inline_keyboard": rows}

def reply_kb():
    return {
        "keyboard": [
            [{"text":"ุงูุนูุงุฌ ุงูุณูููู"}, {"text":"ุงุฎุชุจุงุฑุงุช"}],
            [{"text":"ุงูุชุซููู"}, {"text":"ุชุดุฎูุต ุชุนูููู"}],
            [{"text":"ููู"}, {"text":"ุญุฒู"}],
            [{"text":"ููู"}, {"text":"ุงูุชุฆุงุจ"}],
            [{"text":"ุชูููุณ"}, {"text":"ุนุฑุจู ุณุงููู"}],
            [{"text":"ุชูุงุตู"}, {"text":"ูุณุงุนุฏุฉ"}],
        ],
        "resize_keyboard": True,
        "is_persistent": True
    }

def is_cmd(txt, name):
    return (txt or "").strip().startswith("/"+name)

# ========= Safety (ุจุณูุท) =========
CRISIS_WORDS = ["ุงูุชุญุงุฑ","ุงูุฏู ููุณู","ุงุฐู ููุณู","ูุชู ููุณู","ูุง ุงุจุบู ุงุนูุด","ุฃุคุฐู ููุณู","ุงุงูุฐุงุก"]
def crisis_guard(text):
    low = (text or "")
    for a,b in (("ุฃ","ุง"),("ุฅ","ุง"),("ุข","ุง")): low = low.replace(a,b)
    low = low.lower()
    return any(w in low for w in CRISIS_WORDS)

# ========= HELP / ABOUT =========
def help_msg(chat_id):
    lines = [
        "๐ <b>ุงูุชุนูููุงุช</b>",
        f"ูุนูู <b>ุนุฑุจู ุณุงููู</b> ุชุญุช ุฅุดุฑุงู {SUPERVISOR_NAME} ({SUPERVISOR_TITLE})ุ ุชุฑุฎูุต <b>{LICENSE_NO}</b> โ {LICENSE_ISSUER}.",
        "ุงูุบุฑุถ: ุชุซููู ูุฏุนู ุนุงู ุจุชูููุงุช CBT โ ููุณ ุจุฏููุงู ุนู ุงูุชุดุฎูุต ุงูุทุจู ุฃู ูุตู ุงูุฃุฏููุฉ.",
        "",
        "ุงูุฃุฒุฑุงุฑ:",
        "โข <b>ุงุฎุชุจุงุฑุงุช</b>: GAD-7 (ููู) + PHQ-9 (ุงูุชุฆุงุจ) + PDSS-SR (ููุจุงุช ููุน).",
        "โข <b>ุงูุนูุงุฌ ุงูุณูููู</b>: ุฃุฏูุงุช ูุชุทุจููุงุช CBT.",
        "โข <b>ุงูุชุซููู</b>: ูุนูููุงุช ูุจุณูุทุฉ ุนู ุงูููู/ุงูุงูุชุฆุงุจ/ุงูููู/ุงูููุน.",
        "โข <b>ุชุดุฎูุต ุชุนูููู</b>: ูุคุดุฑุงุช DSM-5 ููุชุซููู ููุท.",
        "โข <b>ุนุฑุจู ุณุงููู</b>: ูุญุงุฏุซุฉ ุจุงูุฐูุงุก ุงูุงุตุทูุงุนู.",
        "",
        "ุฃูุงูุฑ: /menu โข /tests โข /cbt โข /about",
        "ุฅููุงุก ุฌูุณุฉ ุงูุฐูุงุก ุงูุงุตุทูุงุนู: ุงูุชุจ <code>ุงููุงุก</code>.",
        "ููุฃุฒูุงุช: ุงุชุตู ุจุงูุทูุงุฑุฆ ูู ุจูุฏู ุฃู ุงูุฌุฃ ูุฃูุฑุจ ุบุฑูุฉ ุทูุงุฑุฆ."
    ]
    send(chat_id, "\n".join(lines), reply_kb())

def about_msg():
    return (
        "โน๏ธ <b>ุนู ุนุฑุจู ุณุงููู</b>\n"
        "ูุณุงุนุฏ ููุณู ุชุนูููู ุจุงูุนุฑุจูุฉ ููุฏู ุฃุฏูุงุช CBT ูุงุฎุชุจุงุฑุงุช ููููุฉ ูุตูุฑุฉ ูุฏุนููุง ุนุงููุง.\n"
        "ููุณ ุจุฏููุงู ุนู ุงูุนูุงุฌ ุงูุทุจู. ูุทูุจ ุชูุงุตู ุฃู ููุนุฏ: ุงุณุชุฎุฏู ุฒุฑ <b>ุชูุงุตู</b>."
    )

# ========= AI (OpenRouter/OpenAI-compatible) =========
def ai_ready():
    return bool(AI_BASE_URL and AI_API_KEY and AI_MODEL)

AI_SESS = {}  # {uid: [messages]}
SYSTEM_PROMPT = (
    "ุฃูุช ูุณุงุนุฏ ููุณู ุนุฑุจู. ูุฏูู ุฏุนููุง ุนุงูููุง ูุชูููุงุช CBT ุงููุฎุชุตุฑุฉุ ุฏูู ุชุดุฎูุต ุทุจู ุฃู ูุตู ุฏูุงุก. "
    "ุฐููุฑ ุฏุงุฆูุงู ุจุทูุจ ูุณุงุนุฏุฉ ูุจุงุดุฑุฉ ุนูุฏ ูุฌูุฏ ุฎุทุฑ ุนูู ุงูุณูุงูุฉ. ุงุฌุนู ุฑุฏูุฏู ููุฌุฒุฉ ูุนูููุฉ."
)

def ai_call(messages):
    url = AI_BASE_URL + "/v1/chat/completions"
    headers = {"Authorization": f"Bearer {AI_API_KEY}", "Content-Type": "application/json"}
    body = {"model": AI_MODEL, "messages": messages, "temperature": 0.4, "max_tokens": 220}
    r = requests.post(url, headers=headers, json=body, timeout=30)
    if r.status_code != 200:
        raise RuntimeError(f"{r.status_code}: {r.text[:400]}")
    data = r.json()
    return data["choices"][0]["message"]["content"].strip()

def ai_start(chat_id, uid):
    if not ai_ready():
        send(chat_id,
             "ููุฒุฉ ุงูุฐูุงุก ุงูุงุตุทูุงุนู ุบูุฑ ููุนููุฉ.\n"
             "ุฃุถู AI_BASE_URL / AI_API_KEY / AI_MODEL ุซู ุฃุนุฏ ุงููุดุฑ.",
             reply_kb()); return
    AI_SESS[uid] = [{"role":"system","content": SYSTEM_PROMPT}]
    send(chat_id, "๐ค ุจุฏุฃูุง ุฌูุณุฉ <b>ุนุฑุจู ุณุงููู</b>โฆ\nุงูุชุจ ุณุคุงูู ุนู ุงูููู/ุงูููู/CBTโฆ\nูุฅููุงุก ุงูุฌูุณุฉ: ุงูุชุจ <code>ุงููุงุก</code>.", reply_kb())

def ai_handle(chat_id, uid, user_text):
    if crisis_guard(user_text):
        send(chat_id,
             "ุณูุงูุชู ุฃูู ุดูุก ุงูุขู.\nูู ุชุฑุงูุฏู ุฃููุงุฑ ูุฅูุฐุงุก ููุณู ูุงุชุตู ุจุงูุทูุงุฑุฆ ุฃู ุชูุงุตู ูุน ูุฑูุจ ููุซูู ููุฑูุง.\n"
             "ูููุณุงุนุฏุฉ ุงูููุฑูุฉ: ุชูููุณ 4-4-6 ูุนุดุฑ ูุฑุงุชุ ูุงุจูู ูุน ุดุฎุต ุชุซู ุจู.",
             reply_kb()); return
    msgs = AI_SESS.get(uid) or [{"role":"system","content": SYSTEM_PROMPT}]
    msgs = msgs[-16:] + [{"role":"user","content": user_text}]
    try:
        reply = ai_call(msgs)
    except Exception as e:
        send(chat_id,
             "ูุชุนุฐูุฑ ุงูุงุชุตุงู ุจุงูุฐูุงุก ุงูุงุตุทูุงุนู.\n"
             "ูุจุฏู ุฃู ุงูุฑุตูุฏ ูููู ุฃู ุงูููุงุชูุญ ุบูุฑ ุตุงูุญุฉ ูู OpenRouter.\n"
             f"<code>{e}</code>",
             reply_kb()); return
    msgs.append({"role":"assistant","content": reply})
    AI_SESS[uid] = msgs[-18:]
    send(chat_id, reply, reply_kb())

def ai_end(chat_id, uid):
    AI_SESS.pop(uid, None)
    send(chat_id, "ุชู ุฅููุงุก ุฌูุณุฉ ุนุฑุจู ุณุงููู โ", reply_kb())

# ========= Psychoeducation =========
EDU_TOPICS = [
    ("ุงูููู", "edu:anx"),
    ("ุงูุงูุชุฆุงุจ", "edu:dep"),
    ("ุงูููู", "edu:sleep"),
    ("ููุจุงุช ุงูููุน", "edu:panic"),
]
def edu_menu(chat_id):
    rows=[]
    for i in range(0,len(EDU_TOPICS),2):
        rows.append([{"text":t,"callback_data":d} for (t,d) in EDU_TOPICS[i:i+2]])
    send(chat_id, "ุงุฎุชุฑ ููุถูุนูุง ููุชุซููู:", inline(rows))

def edu_text(code):
    if code=="anx":
        return ("<b>ุงูููู</b>\n"
                "ูููุฏ ุจูุฏุฑู ุตุบูุฑ ูููู ูุฒุฏุงุฏ ูุน ุงูุงุฌุชูุงุจ ูุงูุทูุฃูุฉ ุงูุฒุงุฆุฏุฉ.\n"
                "ุฌุฑุจ: ุงูุชุนุฑูุถ ุงูุชุฏุฑูุฌูุ ุชูููู ุงููุงููููุ ุชูููุณ 4-7-8ุ ุชูุธูู ุงูููู.")
    if code=="dep":
        return ("<b>ุงูุงูุชุฆุงุจ</b>\n"
                "ููุจููู ูู ุญููุฉ (ุงูุณุญุงุจ โ ุฎููู โ ูุฒุงุฌ ุฃุณูุฃ).\n"
                "ุงูุนูุงุฌ: ุชูุดูุท ุณูููู (ููุงู ุตุบูุฑุฉ ููุชุนุฉ/ูุงูุนุฉ)ุ ุฑูุชูู ููุงุฑูุ ุชูุงุตู.")
    if code=="sleep":
        return ("<b>ุงูููู</b>\n"
                "ุซุจูุช ุงูุงุณุชููุงุธ ูููููุงุ ูููู ุงูุดุงุดุงุช ูุณุงุกูุ ุงุฌุนู ุงูุณุฑูุฑ ููููู ููุทุ ุทููุณ ุชูุฏุฆุฉ 30-45ุฏ.")
    if code=="panic":
        return ("<b>ููุจุงุช ุงูููุน</b>\n"
                "ุบูุฑ ุฎุทูุฑุฉ ููููุง ูุฒุนุฌุฉ. ูุง ุชูุงูู ุงูุฃุนุฑุงุถุ ุฑุงูุจูุง ูุงุณููููุง ูุงุจูู ูู ุงููููู ุญุชู ุชูุฏุฃ.\n"
                "ุชุนุฑูุถ + ุชูููู ุณููููุงุช ุงูุฃูุงู (ูุงุก/ูุฎุฑุฌ ูุฑูุจโฆ).")
    return "."

def edu_send(chat_id, code):
    send(chat_id, edu_text(code), reply_kb())

# ========= CBT (inline) =========
CBT_ITEMS = [
    ("ุฃุฎุทุงุก ุงูุชูููุฑ","c:cd"),
    ("ุงูุงุฌุชุฑุงุฑ ูุงููุจุช","c:rum"),
    ("ุงูุฃุณุฆูุฉ ุงูุนุดุฑุฉ","c:q10"),
    ("ุงูุงุณุชุฑุฎุงุก","c:rlx"),
    ("ุงูุชูุดูุท ุงูุณูููู","c:ba"),
    ("ุงูููุธุฉ ุงูุฐูููุฉ","c:mind"),
    ("ุญู ุงููุดููุงุช","c:ps"),
    ("ุณููููุงุช ุงูุฃูุงู","c:safe"),
]
def cbt_menu(chat_id):
    rows=[]; 
    for i in range(0,len(CBT_ITEMS),2):
        rows.append([{"text":t,"callback_data":d} for (t,d) in CBT_ITEMS[i:i+2]])
    send(chat_id, "ุงุฎุชุฑ ููุถูุน ุงูุนูุงุฌ ุงูุณูููู:", inline(rows))

def cbt_text(code):
    if code=="cd":
        return [
            "<b>ุฃุฎุทุงุก ุงูุชูููุฑ</b>: ุงูุฃุจูุถ/ุงูุฃุณูุฏุ ุงูุชุนูููุ ูุฑุงุกุฉ ุงูุฃููุงุฑุ ุงูุชูุจุคุ ุงูุชููููโฆ",
            "ูฃ ุฎุทูุงุช: ูก) ุงูุชูุท ุงูููุฑุฉ ูข) ุงูุฏููู ูุนูุง/ุถุฏูุง ูฃ) ุตูุงุบุฉ ูุชูุงุฒูุฉ."
        ]
    if code=="rum":  return ["<b>ุงูุงุฌุชุฑุงุฑ ูุงููุจุช</b>", "ุณููู ุงูููุฑุฉ ูุนุฏูุง. ุฎุตูุต ยซููุช ูููยป. ุญููู ุงูุงูุชุจุงู ููุดุงุท ุจุณูุท."]
    if code=="q10":  return ["<b>ุงูุฃุณุฆูุฉ ุงูุนุดุฑุฉ</b>", "ุงูุฏูููุ ุงูุจุฏุงุฆูุ ุฃุณูุฃ/ุฃูุถู/ุฃุฑุฌุญุ ูู ุตุฏููู ููุงููุ ูู ุฃุนูููุโฆ"]
    if code=="rlx":  return ["<b>ุงูุงุณุชุฑุฎุงุก</b>", "ุชูููุณ 4-7-8 ร6. ุดุฏ/ุฅุฑุฎู ุงูุนุถูุงุช ูู ุงููุฏู ููุฑุฃุณ."]
    if code=="ba":   return ["<b>ุงูุชูุดูุท ุงูุณูููู</b>", "ูุดุงุทุงู ุตุบูุฑุงู ูููููุง (ููุชุน/ูุงูุน) + ูุงุนุฏุฉ 5 ุฏูุงุฆู."]
    if code=="mind": return ["<b>ุงูููุธุฉ ุงูุฐูููุฉ</b>", "ุชูุฑูู 5-4-3-2-1 ููุญูุงุณ. ุงุฑุฌุน ููุญุงุถุฑ ุจุฏูู ุญูู."]
    if code=="ps":   return ["<b>ุญู ุงููุดููุงุช</b>", "ุนุฑููู ุงููุดููุฉ โ ุจุฏุงุฆู โ ุฎุทุฉ ุตุบูุฑุฉ SMART โ ุฌุฑูุจ โ ูููู."]
    if code=="safe": return ["<b>ุณููููุงุช ุงูุฃูุงู</b>", "ูููู ุงูุทูุฃูุฉ/ุงูุชุฌูุจ ุชุฏุฑูุฌููุง ูุน ุชุนุฑูุถ ุขูู."]
    return ["ุชู."]

def cbt_send(chat_id, code):
    for t in cbt_text(code):
        send(chat_id, t, reply_kb())

# ========= Therapy quick cards =========
THERAPY = {
    "sleep": "<b>ุจุฑูุชูููู ุงูููู (ูุฎุชุตุฑ)</b>\nโข ุซุจูุช ุงูุงุณุชููุงุธ ูููููุง\nโข ุทููุณ ุชูุฏุฆุฉ 30โ45ุฏ\nโข ุณุฑูุฑ=ููู ููุท\nโข ูู ูุง ููุช ุฎูุงู 20ุฏ ุงุฎุฑุฌ ููุดุงุท ูุงุฏุฆ ูุงุฑุฌุน.",
    "sad":   "<b>ุนูุงุฌ ุงูุญุฒู (ุชูุดูุท ุณูููู)</b>\nโข 3 ุฃูุดุทุฉ ุตุบูุฑุฉ ุงูููู (ููุชุน/ูุงูุน/ุงุฌุชูุงุนู)\nโข ูููู ุงููุฒุงุฌ ูุจู/ุจุนุฏ.",
    "anx":   "<b>ุงูููู</b>\nโข ุชุนุฑูุถ ุชุฏุฑูุฌู ููููุงูู ุงููุฎููุฉ\nโข ูููู ุงูุทูุฃูุฉ ูุงูุชุฌูุจ\nโข ุชูููุณ ุจุจุทุก.",
    "dep":   "<b>ุงูุงูุชุฆุงุจ</b>\nโข ููุงู 5 ุฏูุงุฆู\nโข ุญุฑูุฉ ุฎูููุฉ\nโข ุชูุงุตู ูุน ุตุฏูู.",
    "panic": "<b>ููุจุฉ ุงูููุน</b>\nโข ูุงุญุธ ุงูุฃุนุฑุงุถ ูู ยซููุฌุฉยป ูุงุณููููุง\nโข ุงุจูู ูู ุงููููู ุญุชู ุชูุฎูุถ 50% ุนูู ุงูุฃูู\nโข ุงูุชูุน ุนู ุงููุฑูุจ.",
}

# ========= Educational Diagnostic (DSM-like, not medical) =========
def dx_intro(chat_id):
    rows = [[{"text":"ููู","callback_data":"dx:anx"},{"text":"ุงูุชุฆุงุจ","callback_data":"dx:dep"}],
            [{"text":"ููุจุงุช ููุน","callback_data":"dx:panic"}]]
    send(chat_id,
         "๐งญ <b>ุชุดุฎูุต ุชุนูููู</b> (ููุชุซููู ููุท)\n"
         "ุงุฎุชุฑ ูุฌุงููุง ูุนุฑุถ ูุคุดุฑุงุช DSM-5 ุงูุดุงุฆุนุฉ ูุฑูุงุจุท ุงูุงุฎุชุจุงุฑุงุช ุงูููุงุณุจุฉ.",
         inline(rows))

def dx_text(code):
    if code=="anx":
        return ("<b>ููู (ุชุนูููู)</b>\nูุคุดุฑุงุช ุดุงุฆุนุฉ โฅ6 ุฃุดูุฑ: ููู ุฒุงุฆุฏ ุตุนุจ ุงูุณูุทุฑุฉุ ุชูุชุฑ/ุชุนุจุ ุตุนูุจุฉ ุงูุชุฑููุฒุ ุงุถุทุฑุงุจ ุงููููโฆ\n"
                "ุงุฎุชุจุฑ ููุณู ุจูููุงุณ <b>GAD-7</b> ูู ยซุงุฎุชุจุงุฑุงุชยป.")
    if code=="dep":
        return ("<b>ุงูุชุฆุงุจ (ุชุนูููู)</b>\nูุฒุงุฌ ููุฎูุถ ุฃู ููุฏ ุงููุชุนุฉ ูุนุธู ุงูุฃูุงู + ูค ุฃุนุฑุงุถ (ููู/ุดููุฉ/ุทุงูุฉ/ุชุฑูุฒ/ุฐูุจ/ุฃููุงุฑ ููุชโฆ) ููุฏุฉ โฅ ุฃุณุจูุนูู.\n"
                "ุงุฎุชุจุฑ ููุณู ุจูููุงุณ <b>PHQ-9</b> ูู ยซุงุฎุชุจุงุฑุงุชยป.")
    if code=="panic":
        return ("<b>ููุจุงุช ููุน (ุชุนูููู)</b>\nูุฌูุงุช ูุฌุงุฆูุฉ ูุน ุฎููุงู/ุถููู ููุณ/ุฏูุฎุฉโฆ ููููุง ููู ุชููุนู ุฃู ุชุฌูุจ โฅ ุดูุฑ.\n"
                "ููุชูุฏูุฑ ุงูุฐุงุชู ุฌุฑูุจ <b>PDSS-SR</b> ูู ยซุงุฎุชุจุงุฑุงุชยป.")
    return "."

# ========= Tests =========
# ูู ุงุฎุชุจุงุฑ ูุญุฏุฏ: ุงูุงุณูุ ุงูุฃุณุฆูุฉุ ุฎูุงุฑุงุช ุงูุฅุฌุงุจุฉ (label,score)
ANS_0_3 = [("ุฃุจุฏูุง",0),("ุนุฏุฉ ุฃูุงู",1),("ุฃูุซุฑ ูู ุงููุตู",2),("ุชูุฑูุจูุง ูููููุง",3)]
GAD7_Q = [
    "ุงูุชูุชุฑ/ุงูุนุตุจูุฉ ุฃู ุงูุดุนูุฑ ุจุงูููู",
    "ุนุฏู ุงููุฏุฑุฉ ุนูู ุงูุชููู ุนู ุงูููู ุฃู ุงูุณูุทุฑุฉ ุนููู",
    "ุงูุงูุดุบุงู ุจุงููููู ุจุฏุฑุฌุฉ ูุจูุฑุฉ",
    "ุตุนูุจุฉ ุงูุงุณุชุฑุฎุงุก",
    "ุชูููู/ุตุนูุจุฉ ุงูุฌููุณ ุจูุฏูุก",
    "ุงูุงูุฒุนุงุฌ ุจุณุฑุนุฉ ุฃู ุงูุนุตุจูุฉ",
    "ุงูุฎูู ูู ุญุฏูุซ ุดูุก ุณูุฆ",
]
PHQ9_Q = [
    "ููุฉ ุงูุงูุชูุงู ุฃู ุงููุชุนุฉ ุจุงูููุงู ุจุงูุฃุดูุงุก",
    "ุงูุดุนูุฑ ุจุงูุญุฒู ุฃู ุงูุงูุชุฆุงุจ ุฃู ุงููุฃุณ",
    "ูุดุงูู ูู ุงูููู ุฃู ุงูููู ูุซูุฑูุง",
    "ุงูุฅุฑูุงู ุฃู ููุฉ ุงูุทุงูุฉ",
    "ุถุนู ุงูุดููุฉ ุฃู ุงูุฅูุฑุงุท ูู ุงูุฃูู",
    "ุงูุดุนูุฑ ุจุชุฏูู ุชูุฏูุฑ ุงูุฐุงุช ุฃู ุงูุฐูุจ",
    "ุตุนูุจุฉ ุงูุชุฑููุฒ",
    "ุงูุญุฑูุฉ/ุงูููุงู ุจุจุทุก ุดุฏูุฏ ุฃู ุชูุชุฑ ุฒุงุฆุฏ",
    "ุฃููุงุฑ ุจุฃูู ุณุชููู ุฃูุถู ุญุงููุง ูู ูู ุชูู ููุฌูุฏูุง",
]
# PDSS-SR (ูุจุณูุท 7 ุจููุฏ 0-4)
PDSS_Q = [
    "ุดุฏูุฉ ููุจุงุช ุงูููุน ุฎูุงู ุงูุฃุณุจูุน ุงููุงุถู",
    "ุงูุถูู ุฃุซูุงุก ุงูููุจุฉ",
    "ุงูููู ุงูุชููุนู ูู ุญุฏูุซ ููุจุฉ",
    "ุชุฌููุจ ุงูููุงูู ุฎูููุง ูู ุงูููุจุฉ",
    "ุชุฃุซูุฑ ุงูุฃุนุฑุงุถ ุงูุฌุณุฏูุฉ (ููุจ/ููุณ) ุนูู ุญูุงุชู",
    "ุงูุชุฃุซูุฑ ุนูู ุงูุนูู/ุงูุฏุฑุงุณุฉ",
    "ุงูุชุฃุซูุฑ ุนูู ุงูุนูุงูุงุช/ุงูุฎุฑูุฌ",
]
ANS_0_4 = [("ูุง ุดูุก",0),("ุฎููู",1),("ูุชูุณุท",2),("ุดุฏูุฏ",3),("ุดุฏูุฏ ุฌุฏูุง",4)]

TESTS = {
    "g7":   {"name":"ูููุงุณ ุงูููู GAD-7","q":GAD7_Q,"ans":ANS_0_3},
    "phq":  {"name":"ูููุงุณ ุงูุงูุชุฆุงุจ PHQ-9","q":PHQ9_Q,"ans":ANS_0_3},
    "pdss": {"name":"ูููุงุณ ููุจุงุช ุงูููุน PDSS-SR","q":PDSS_Q,"ans":ANS_0_4},
}

SESS = {}  # {uid: {"key":, "i":, "score":}}

def tests_menu(chat_id):
    rows = [
        [{"text":"ุงุฎุชุจุงุฑ ุงูููู (GAD-7)","callback_data":"t:g7"}],
        [{"text":"ุงุฎุชุจุงุฑ ุงูุงูุชุฆุงุจ (PHQ-9)","callback_data":"t:phq"}],
        [{"text":"ุงุฎุชุจุงุฑ ููุจุงุช ุงูููุน (PDSS-SR)","callback_data":"t:pdss"}],
    ]
    send(chat_id, "ุงุฎุชุฑ ุงุฎุชุจุงุฑูุง:", inline(rows))

def start_test(chat_id, uid, key):
    d = TESTS[key]
    SESS[uid] = {"key":key,"i":0,"score":0}
    send(chat_id, f"ุณูุจุฏุฃ: <b>{d['name']}</b>\nุฃุฌุจ ุญุณุจ ุขุฎุฑ ุฃุณุจูุนูู.", reply_kb())
    ask_next(chat_id, uid)

def ask_next(chat_id, uid):
    st = SESS.get(uid)
    if not st: return
    d = TESTS[st["key"]]; qs = d["q"]; answers = d["ans"]; i = st["i"]
    if i >= len(qs):
        score = st["score"]; max_sc = (answers[-1][1]) * len(qs)
        send(chat_id, f"ุงููุชูุฌุฉ: <b>{score}</b> ูู {max_sc}\n{interpret(st['key'], score)}", reply_kb())
        SESS.pop(uid, None); return
    # ุงุจูู ููุญุฉ ุฅุฌุงุจุงุช ุตููู/ุซูุงุซุฉ
    cells = [{"text":lbl, "callback_data":f"a{idx}"} for idx,(lbl,_) in enumerate(answers)]
    rows = []
    step = 2
    for k in range(0,len(cells),step):
        rows.append(cells[k:k+step])
    send(chat_id, f"ุณ{ i+1 }: {qs[i]}", inline(rows))

def record_answer(chat_id, uid, ans_idx):
    st = SESS.get(uid)
    if not st: return
    d = TESTS[st["key"]]
    answers = d["ans"]
    if 0 <= ans_idx < len(answers):
        st["score"] += answers[ans_idx][1]
        st["i"] += 1
    ask_next(chat_id, uid)

def interpret(key, score):
    if key=="g7":
        # 0-21
        lvl = "ููู ุถุฆูู" if score<=4 else ("ููู ุฎููู" if score<=9 else ("ููู ูุชูุณุท" if score<=14 else "ููู ุดุฏูุฏ"))
        tip = "ุชูููุณ ุจุจุทุกุ ูููู ุงููุงููููุ ุชุนุฑูุถ ุชุฏุฑูุฌููุง ูููุฎุงูู."
        return f"<b>{lvl}</b>.\n{tip}"
    if key=="phq":
        # 0-27
        lvl = "ุถุฆูู" if score<=4 else ("ุฎููู" if score<=9 else ("ูุชูุณุท" if score<=14 else ("ูุชูุณุท ุฅูู ุดุฏูุฏ" if score<=19 else "ุดุฏูุฏ")))
        tip = "ุงูุชูุดูุท ุงูุณูููู + ุชูุงุตู ุงุฌุชูุงุนู + ุฑูุชูู ููู."
        return f"<b>ุงูุชุฆุงุจ {lvl}</b>.\n{tip}"
    if key=="pdss":
        # 0-28
        lvl = "ุฎููู" if score<=7 else ("ูุชูุณุท" if score<=14 else ("ููุญูุธ" if score<=21 else "ุดุฏูุฏ"))
        tip = "ูุณุงุนุฏ ุงูุชุนุฑุถ ุงูุชุฏุฑูุฌู ูุชูููู ุณููููุงุช ุงูุฃูุงู. ุฑุงุฌุน ูุฎุชุตูุง ูู ูุงูุช ุงูููุจุงุช ููููุฏุฉ ูุญูุงุชู."
        return f"<b>ููุจุงุช ููุน โ ุดุฏุฉ {lvl}</b>.\n{tip}"
    return "."

# ========= Routes =========
@app.get("/")
def home():
    return jsonify({
        "app": "Arabi Psycho Telegram Bot",
        "public_url": RENDER_EXTERNAL_URL,
        "webhook": f"/webhook/{WEBHOOK_SECRET[:3]}*****",
        "ai_ready": ai_ready()
    })

@app.get("/setwebhook")
def set_hook():
    if not RENDER_EXTERNAL_URL:
        return jsonify({"ok": False, "error": "RENDER_EXTERNAL_URL not set"}), 400
    url = f"{RENDER_EXTERNAL_URL}/webhook/{WEBHOOK_SECRET}"
    r = requests.post(f"{BOT_API}/setWebhook", json={"url": url}, timeout=15)
    try: data = r.json()
    except: data = {"ok": False, "text": r.text}
    return data, r.status_code

@app.post(f"/webhook/{WEBHOOK_SECRET}")
def webhook():
    upd = request.get_json(force=True, silent=True) or {}

    # --- Callbacks ---
    if "callback_query" in upd:
        cq = upd["callback_query"]; data = cq.get("data","")
        chat_id = cq["message"]["chat"]["id"]; uid = cq["from"]["id"]

        if data.startswith("t:"):
            key = data.split(":",1)[1]
            if key in TESTS: start_test(chat_id, uid, key)
            else: send(chat_id, "ุงุฎุชุจุงุฑ ุบูุฑ ูุนุฑูู.", reply_kb())
            return "ok", 200

        if data.startswith("a"):
            try:
                idx = int(data[1:])
                record_answer(chat_id, uid, idx)
            except: send(chat_id, "ุฅุฌุงุจุฉ ุบูุฑ ุตุงูุญุฉ.", reply_kb())
            return "ok", 200

        if data.startswith("c:"):
            code = data.split(":",1)[1]
            cbt_send(chat_id, code); return "ok", 200

        if data.startswith("edu:"):
            code = data.split(":",1)[1]
            edu_send(chat_id, code); return "ok", 200

        if data.startswith("dx:"):
            code = data.split(":",1)[1]
            send(chat_id, dx_text(code), reply_kb()); return "ok", 200

        return "ok", 200

    # --- Messages ---
    msg = upd.get("message") or upd.get("edited_message") or {}
    if not msg: return "ok", 200
    chat_id = msg["chat"]["id"]
    text = (msg.get("text") or "").strip()
    low  = text
    for a,b in (("ุฃ","ุง"),("ุฅ","ุง"),("ุข","ุง")): low = low.replace(a,b)
    low = low.lower()
    uid = msg.get("from", {}).get("id")
    user = msg.get("from", {})
    username = user.get("username") or (user.get("first_name","")+" "+user.get("last_name","")).strip() or "ูุณุชุฎุฏู"

    # AI session?
    if uid in AI_SESS and low not in ("ุงููุงุก","ุงููุงุก."):
        ai_handle(chat_id, uid, text); return "ok", 200
    if low in ("ุงููุงุก","ุงููุงุก."):
        ai_end(chat_id, uid); return "ok", 200

    # Commands
    if is_cmd(text,"start"):
        send(chat_id,
             "ุฃูููุง ุจู! ุฃูุง <b>ุนุฑุจู ุณุงููู</b>.\n"
             "ุงููุงุฆูุฉ ุงูุณูููุฉ: ุงุฎุชุจุงุฑุงุชุ ุงูุนูุงุฌ ุงูุณููููุ ูููุ ุญุฒูุ ูููุ ุงูุชุฆุงุจุ ุชูููุณุ ุนุฑุจู ุณุงูููโฆ\n"
             "โข /tests ููุงุฎุชุจุงุฑุงุช โข /cbt ููุนูุงุฌ ุงูุณูููู โข /menu ูุนุฑุถ ุงูุฃุฒุฑุงุฑ โข /help ูููุณุงุนุฏุฉ.",
             reply_kb()); return "ok", 200
    if is_cmd(text,"menu"):
        send(chat_id, "ุงููุงุฆูุฉ:", reply_kb()); return "ok", 200
    if is_cmd(text,"help"):
        help_msg(chat_id); return "ok", 200
    if is_cmd(text,"about"):
        send(chat_id, about_msg(), reply_kb()); return "ok", 200
    if is_cmd(text,"tests"):
        tests_menu(chat_id); return "ok", 200
    if is_cmd(text,"cbt"):
        cbt_menu(chat_id); return "ok", 200

    # Buttons / keywords
    if low == "ุงุฎุชุจุงุฑุงุช":
        tests_menu(chat_id); return "ok", 200
    if low == "ุงูุนูุงุฌ ุงูุณูููู":
        cbt_menu(chat_id); return "ok", 200
    if low == "ุงูุชุซููู":
        edu_menu(chat_id); return "ok", 200
    if low == "ุชุดุฎูุต ุชุนูููู":
        dx_intro(chat_id); return "ok", 200

    if low == "ููู":
        send(chat_id, THERAPY["sleep"], reply_kb()); return "ok", 200
    if low == "ุญุฒู":
        send(chat_id, THERAPY["sad"], reply_kb()); return "ok", 200
    if low == "ููู":
        send(chat_id, THERAPY["anx"], reply_kb()); return "ok", 200
    if low == "ุงูุชุฆุงุจ":
        send(chat_id, THERAPY["dep"], reply_kb()); return "ok", 200
    if low in ("ููุน","ููุจุงุช ุงูููุน","ููุจู","ููุน "):
        send(chat_id, THERAPY["panic"], reply_kb()); return "ok", 200

    if low in ("ุชููุณ","ุชูููุณ","ุชููุณ "):
        send(chat_id, "โจ ุชูุฑูู ุชูููุณ 4-7-8: ุดููู 4 ุซูุงููุ ุญุจุณ 7ุ ุฒููุฑ 8. ูุฑุฑ 6 ูุฑุงุช.", reply_kb()); return "ok", 200

    if low in ("ุนุฑุจู ุณุงููู","ุฐูุงุก ุงุตุทูุงุนู","ุงูุฐูุงุก ุงูุงุตุทูุงุนู"):
        ai_start(chat_id, uid); return "ok", 200

    if low in ("ูุณุงุนุฏุฉ","ุงูุชุนูููุงุช"):
        help_msg(chat_id); return "ok", 200

    if low in ("ุชูุงุตู","ุชูุงุตู "):
        send(chat_id, "ุชู ุชุณุฌูู ุทูุจ ุชูุงุตู โ ุณูุฑุฌุน ูู ูุฑูุจูุง.", reply_kb())
        if ADMIN_CHAT_ID:
            info = (f"๐ฉ ุทูุจ ุชูุงุตู\n"
                    f"ูู: {username} (id={uid}, chat_id={chat_id})\n"
                    f"ูุตูู: {text}")
            tg("sendMessage", {"chat_id": int(ADMIN_CHAT_ID), "text": info})
        if CONTACT_PHONE:
            send(chat_id, f"๐ ุจุฅููุงูู ุงูุชูุงุตู ุงููุจุงุดุฑ ุนูู ุงูุฑูู: {CONTACT_PHONE}", reply_kb())
        return "ok", 200

    # fallback
    if ai_ready():
        ai_start(chat_id, uid)
        send(chat_id, "ุงูุชุจ ุณุคุงููโฆ", reply_kb())
    else:
        send(chat_id, "ุงูุชุจ /menu ูุนุฑุถ ุงูุฃุฒุฑุงุฑ ุฃู /help ูููุณุงุนุฏุฉ.", reply_kb())
    return "ok", 200


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
