# app.py โ Arabi Psycho Telegram Bot (CBT + Tests + Educational Dx + AI Chat)
# -------------------------------------------
import os, json, logging
from flask import Flask, request, jsonify
import requests

# ========= ุงูุฅุนุฏุงุฏุงุช =========
BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("Missing TELEGRAM_BOT_TOKEN")
BOT_API = f"https://api.telegram.org/bot{BOT_TOKEN}"

WEBHOOK_SECRET     = os.environ.get("WEBHOOK_SECRET", "secret")
RENDER_EXTERNAL_URL= os.environ.get("RENDER_EXTERNAL_URL", "")
ADMIN_CHAT_ID      = os.environ.get("ADMIN_CHAT_ID", "")
CONTACT_PHONE      = os.environ.get("CONTACT_PHONE", "")

# ุงูุฐูุงุก ุงูุงุตุทูุงุนู (OpenAI-compatible ูุซู OpenRouter)
AI_BASE_URL = (os.environ.get("AI_BASE_URL", "") or "").rstrip("/")
AI_API_KEY  = os.environ.get("AI_API_KEY", "")
AI_MODEL    = os.environ.get("AI_MODEL", "openai/gpt-4o-mini")

# ========= ุชุญุถูุฑ ุงูุชุทุจูู =========
app = Flask(__name__)
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("arabi-psycho")

# ========= ุฃุฏูุงุช ุชูููุฌุฑุงู =========
def tg(method, payload):
    r = requests.post(f"{BOT_API}/{method}", json=payload, timeout=30)
    if r.status_code != 200:
        log.warning("TG %s -> %s %s", method, r.status_code, r.text[:300])
    return r

def send(chat_id, text, reply_markup=None, parse_mode="HTML"):
    data = {"chat_id": chat_id, "text": text, "parse_mode": parse_mode, "disable_web_page_preview": True}
    if reply_markup: data["reply_markup"] = reply_markup
    return tg("sendMessage", data)

def inline(rows):
    return {"inline_keyboard": rows}

def reply_kb():
    # ููุญุฉ ุฃุฒุฑุงุฑ ุณูููุฉ ุฏุงุฆูุฉ
    return {
        "keyboard": [
            [{"text":"ุงูุนูุงุฌ ุงูุณูููู"}, {"text":"ุงุฎุชุจุงุฑุงุช"}],
            [{"text":"ุงูุชุซููู"}, {"text":"ุชุดุฎูุต ุชุนูููู"}],
            [{"text":"ููู"}, {"text":"ุญุฒู"}],
            [{"text":"ููู"}, {"text":"ุงูุชุฆุงุจ"}],
            [{"text":"ุชูููุณ"}, {"text":"ุนุฑุจู ุณุงููู"}],
            [{"text":"ุนู ุนุฑุจู ุณุงููู"}, {"text":"ุชูุงุตู"}],
            [{"text":"ูุณุงุนุฏุฉ"}],
        ],
        "resize_keyboard": True,
        "is_persistent": True
    }

def is_cmd(txt, name):
    return (txt or "").strip().startswith("/" + name)

# ========= ููุงุชุฑ ุฃูุงู ุจุณูุทุฉ =========
CRISIS_WORDS = ["ุงูุชุญุงุฑ","ุงุงุฐู ููุณู","ุงุฐู ููุณู","ูุชู ููุณู","ูู ุงุนุฏ ุงุฑูุฏ ุงูุนูุด","ูุง ุงุจุบู ุงุนูุด"]
def crisis_guard(text):
    low = (text or "").replace("ุฃ","ุง").replace("ุฅ","ุง").replace("ุข","ุง").lower()
    return any(w in low for w in CRISIS_WORDS)

# ========= ุงูุชุนูููุงุช & ูุจุฐุฉ =========
ABOUT = (
    "<b>ุนุฑุจู ุณุงููู</b> ๐ค ูุณุงุนุฏ ููุณู ุชุนูููู ุจุงููุบุฉ ุงูุนุฑุจูุฉ.\n"
    "ููุฏูู ููุงุฏ ุชุซููููุฉ ูุชูุงุฑูู CBT ุจุณูุทุฉ ูุงุฎุชุจุงุฑุงุช ููุงุณูุฉ ุฐุงุชููุง.\n"
    "<b>ุชูุจูู ููู:</b> ูุณุชู ุจุฏูููุง ุนู ุงูุชุดุฎูุต ุฃู ุงูุนูุงุฌ ูุฏู ูุฎุชุต. "
    "ุงููุดุฑูุน ุชุญุช ุฅุดุฑุงู <b>ุฃุฎุตุงุฆู ููุณู ูุฑุฎูุต</b>ุ ุงููุญุชูู ูุฃุบุฑุงุถ ุงูุชุซููู ูุงูุฏุนู ููุท.\n"
    f"{'ูุงุชู ููุชูุงุตู: ' + CONTACT_PHONE if CONTACT_PHONE else ''}"
)

HELP = (
    "ุงูุฃูุงูุฑ:\n"
    "โข /start ูุจุฏุก ุงูุงุณุชุฎุฏุงู\n"
    "โข /menu ูุนุฑุถ ุงูุฃุฒุฑุงุฑ\n"
    "โข /tests ูุจุฏุก ุงูุงุฎุชุจุงุฑุงุช\n"
    "โข /cbt ูุจุทุงูุงุช ุงูุนูุงุฌ ุงูุณูููู\n"
    "โข ุงูุชุจ ยซุนุฑุจู ุณุงูููยป ูุจุฏุก ูุญุงุฏุซุฉ ุฐููุฉ\n"
    "โข ยซุชุดุฎูุต ุชุนููููยป ููุญุตูู ุนูู ูุณุงุฑุงุช ููุตุงุฆุญ ูุจุณุทุฉ"
)

# ========= ุงุฎุชุจุงุฑุงุช ููุณูุฉ =========
ANS4 = [("ุฃุจุฏูุง",0), ("ุนุฏุฉ ุฃูุงู",1), ("ุฃูุซุฑ ูู ุงููุตู",2), ("ุชูุฑูุจูุง ูููููุง",3)]
G7 = [
    "ุงูุชูุชุฑ/ุงูุนุตุจูุฉ ุฃู ุงูุดุนูุฑ ุจุงูููู",
    "ุนุฏู ุงููุฏุฑุฉ ุนูู ุงูุชููู ุนู ุงูููู ุฃู ุงูุณูุทุฑุฉ ุนููู",
    "ุงูุงูุดุบุงู ุจุงููููู ุจุฏุฑุฌุฉ ูุจูุฑุฉ",
    "ุตุนูุจุฉ ุงูุงุณุชุฑุฎุงุก",
    "ุชูููู/ุตุนูุจุฉ ุงูุฌููุณ ุจูุฏูุก",
    "ุงูุงูุฒุนุงุฌ ุจุณุฑุนุฉ ุฃู ุงูุนุตุจูุฉ",
    "ุงูุฎูู ูู ุญุฏูุซ ุดูุก ุณูุฆ"
]
PHQ9 = [
    "ููุฉ ุงูุงูุชูุงู ุฃู ุงููุชุนุฉ ุจุงูููุงู ุจุงูุฃุดูุงุก",
    "ุงูุดุนูุฑ ุจุงูุญุฒู ุฃู ุงูุงูุชุฆุงุจ ุฃู ุงููุฃุณ",
    "ูุดุงูู ูู ุงูููู ุฃู ุงูููู ูุซูุฑูุง",
    "ุงูุฅุฑูุงู ุฃู ููุฉ ุงูุทุงูุฉ",
    "ุถุนู ุงูุดููุฉ ุฃู ุงูุฅูุฑุงุท ูู ุงูุฃูู",
    "ุงูุดุนูุฑ ุจุชุฏูู ุชูุฏูุฑ ุงูุฐุงุช ุฃู ุงูุฐูุจ",
    "ุตุนูุจุฉ ุงูุชุฑููุฒ",
    "ุงูุญุฑูุฉ/ุงูููุงู ุจุจุทุก ุดุฏูุฏ ุฃู ุนูู ุงูุนูุณ ุจุชูุชุฑ ุฒุงุฆุฏ",
    "ุฃููุงุฑ ุจุฃูู ุณุชููู ุฃูุถู ุญุงููุง ูู ูู ุชูู ููุฌูุฏูุง"
]
# PDSS-SR ูุจุณูุท ูููุจุงุช ุงูููุน (0-4)
ANS5 = [("0 ูุง ุดูุก",0), ("1 ุฎููู",1), ("2 ูุชูุณุท",2), ("3 ุดุฏูุฏ",3), ("4 ุดุฏูุฏ ุฌุฏูุง",4)]
PDSS = [
    "ูุฏู ุดุฏุฉ ููุจุงุช ุงูููุน ุฎูุงู ุงูุฃุณุจูุนูู ุงููุงุถููู",
    "ูุฏู ุชูุฑุงุฑ ููุจุงุช ุงูููุน",
    "ุงูุฎูู ูู ุญุฏูุซ ููุจุฉ ุฃุฎุฑู",
    "ุชุฌูุจ ุงูุฃูุงูู/ุงูููุงูู ุฎูููุง ูู ุงูููุน",
    "ุงูุถูู ุงููุงุฌู ุนู ุงูููู ุงููุชููุน (anticipatory)",
    "ุงูุฃุซุฑ ุนูู ุงูุนูู/ุงูุฏุฑุงุณุฉ",
    "ุงูุฃุซุฑ ุนูู ุงูุนูุงูุงุช/ุงูุญูุงุฉ ุงูุงุฌุชูุงุนูุฉ"
]

TESTS = {
    "g7":  {"name":"ูููุงุณ ุงูููู GAD-7",     "q": G7,   "ans": ANS4},
    "phq": {"name":"ูููุงุณ ุงูุงูุชุฆุงุจ PHQ-9",  "q": PHQ9, "ans": ANS4},
    "pdss":{"name":"ูููุงุณ ููุจุงุช ุงูููุน (PDSS-SR ูุจุณูุท)", "q": PDSS, "ans": ANS5},
}
SESS = {}  # {uid: {"key":..., "i":..., "score":...}}

def tests_menu(chat_id):
    send(chat_id, "ุงุฎุชุฑ ุงุฎุชุจุงุฑูุง:", inline([
        [{"text":"ุงุฎุชุจุงุฑ ุงูููู (GAD-7)", "callback_data":"t:g7"}],
        [{"text":"ุงุฎุชุจุงุฑ ุงูุงูุชุฆุงุจ (PHQ-9)", "callback_data":"t:phq"}],
        [{"text":"ุงุฎุชุจุงุฑ ููุจุงุช ุงูููุน (PDSS-SR)", "callback_data":"t:pdss"}],
    ]))

def start_test(chat_id, uid, key):
    data = TESTS[key]
    SESS[uid] = {"key": key, "i": 0, "score": 0}
    send(chat_id, f"ุณูุจุฏุฃ: <b>{data['name']}</b>\nุฃุฌุจ ุจุญุณุจ ุขุฎุฑ ุฃุณุจูุนูู.", reply_kb())
    ask_next(chat_id, uid)

def ask_next(chat_id, uid):
    st = SESS.get(uid)
    if not st: return
    key, i = st["key"], st["i"]; qs = TESTS[key]["q"]; ans = TESTS[key]["ans"]
    if i >= len(qs):
        score = st["score"]; SESS.pop(uid, None)
        txt = f"ุงููุชูุฌุฉ: <b>{score}</b>\n{interpret_test(key, score)}"
        send(chat_id, txt, reply_kb()); return
    # ุจูุงุก ุงูุฃุฒุฑุงุฑ ุจุญุณุจ ุนุฏุฏ ุงูุฎูุงุฑุงุช
    rows = []
    row = []
    for idx, (label, _) in enumerate(ans):
        row.append({"text": label, "callback_data": f"a{idx}"})
        if len(row) == 2:
            rows.append(row); row=[]
    if row: rows.append(row)
    send(chat_id, f"ุณ{ i+1 }: {qs[i]}", inline(rows))

def record_answer(chat_id, uid, ans_idx):
    st = SESS.get(uid)
    if not st: return
    key = st["key"]; ans = TESTS[key]["ans"]
    if 0 <= ans_idx < len(ans):
        st["score"] += ans[ans_idx][1]
        st["i"] += 1
    ask_next(chat_id, uid)

def interpret_test(key, score):
    if key == "g7":
        if score <= 4: lvl = "ููู ุถุฆูู"
        elif score <= 9: lvl = "ููู ุฎููู"
        elif score <= 14: lvl = "ููู ูุชูุณุท"
        else: lvl = "ููู ุดุฏูุฏ"
        return f"<b>{lvl}</b> โ ุฌุฑูุจ ุชูุงุฑูู ุงูุชูููุณุ ูุซุจูุช ููุงุนูุฏ ูููู. ุงุทูุจ ูุณุงุนุฏุฉ ูุฎุชุต ุฅุฐุง ุฃุซุฑ ุนูู ุญูุงุชู."
    if key == "phq":
        if score <= 4: lvl="ุถุฆูู"
        elif score <= 9: lvl="ุฎููู"
        elif score <= 14: lvl="ูุชูุณุท"
        elif score <= 19: lvl="ูุชูุณุท ุฅูู ุดุฏูุฏ"
        else: lvl="ุดุฏูุฏ"
        return f"<b>ุงูุชุฆุงุจ {lvl}</b> โ ููุตู ุจุงูุชูุดูุท ุงูุณููููุ ูุงูุฏุนู ุงูุงุฌุชูุงุนูุ ููุฑุงุฌุนุฉ ูุฎุชุต ุนูุฏ ุงูุงุฑุชูุงุน."
    if key == "pdss":
        if score <= 7: lvl="ุถุฆูู"
        elif score <= 15: lvl="ุฎููู"
        elif score <= 23: lvl="ูุชูุณุท"
        elif score <= 28: lvl="ุดุฏูุฏ"
        else: lvl="ุดุฏูุฏ ุฌุฏูุง"
        return f"<b>ููุจุงุช ููุน: {lvl}</b> โ ุงูุชุนุฑุถ ุงูุชุฏุฑูุฌู ูุชูุงุฑูู ุงูุชูููุณ ูููุฏุฉ. ุฅู ูุงูุช ุงูููุจุงุช ูุชูุฑุฑุฉุ ุงุณุชุดุฑ ูุฎุชุตูุง."
    return "ุชู."

# ========= ุจุทุงูุงุช ุงูุนูุงุฌ ุงูุณูููู (CBT) =========
CBT_ITEMS = [
    ("ุฃุฎุทุงุก ุงูุชูููุฑ", "c:cd"),
    ("ุงูุงุฌุชุฑุงุฑ ูุงููุจุช", "c:rum"),
    ("ุงูุฃุณุฆูุฉ ุงูุนุดุฑุฉ", "c:q10"),
    ("ุงูุงุณุชุฑุฎุงุก", "c:rlx"),
    ("ุงูุชูุดูุท ุงูุณูููู", "c:ba"),
    ("ุงูููุธุฉ ุงูุฐูููุฉ", "c:mind"),
    ("ุญู ุงููุดููุงุช", "c:ps"),
    ("ุณููููุงุช ุงูุฃูุงู", "c:safe"),
]
def cbt_menu(chat_id):
    rows=[]
    for i in range(0, len(CBT_ITEMS), 2):
        rows.append([{"text":CBT_ITEMS[i][0], "callback_data":CBT_ITEMS[i][1]},
                     {"text":CBT_ITEMS[i+1][0], "callback_data":CBT_ITEMS[i+1][1]}])
    send(chat_id, "ุงุฎุชุฑ ููุถูุน ุงูุนูุงุฌ ุงูุณูููู:", inline(rows))

def cbt_text(code):
    if code=="cd":
        return ["<b>ุฃุฎุทุงุก ุงูุชูููุฑ</b>\nุงูุฃุจูุถ/ุงูุฃุณูุฏุ ุงูุชุนูููุ ูุฑุงุกุฉ ุงูุฃููุงุฑุ ุงูุชูุจุคุ ุงูุชููููโฆ",
                "ุฎุทูุงุช: ูก) ุงูุชูุท ุงูููุฑุฉ ูข) ุฃุฏูุฉ ูุนูุง/ุถุฏูุง ูฃ) ุตูุงุบุฉ ูุชูุงุฒูุฉ ูุงูุนูุฉ."]
    if code=="rum":
        return ["<b>ุงูุงุฌุชุฑุงุฑ ูุงููุจุช</b>",
                "ุณููู ุงูููุฑุฉุ ุฎุตูุต ยซููุช ูููยปุ ุญููู ุงูุชุจุงูู ููุดุงุท ุจุณูุท (ูุดู/ุชุฑุชูุจ)."]
    if code=="q10":
        return ["<b>ุงูุฃุณุฆูุฉ ุงูุนุดุฑุฉ</b>",
                "ุงูุฏูููุ ุงูุจุฏุงุฆูุ ูู ุตุฏูู ููุงููุ ุฃุณูุฃ/ุฃูุถู/ุฃุฑุฌุญุ ูู ุฃุนูููุ ูุงุฐุง ุฃุชุฌุงููุ ุงูุฎโฆ"]
    if code=="rlx":
        return ["<b>ุงูุงุณุชุฑุฎุงุก</b>", "ุชูููุณ 4-7-8 ร6 ูุฑุงุช. ุดุฏู/ุฅุฑุฎู ุงูุนุถูุงุช ูู ุงููุฏู ููุฑุฃุณ ุจุจุทุก."]
    if code=="ba":
        return ["<b>ุงูุชูุดูุท ุงูุณูููู</b>", "ูุดุงุทุงู ุตุบูุฑุงู ูููููุง (ููุชุน/ูุงูุน). ูุงุนุฏุฉ 5 ุฏูุงุฆู. ูููู ุงููุฒุงุฌ ูุจู/ุจุนุฏ."]
    if code=="mind":
        return ["<b>ุงูููุธุฉ ุงูุฐูููุฉ</b>", "ุชูุฑูู 5-4-3-2-1 ููุญูุงุณ. ูุงุญุธ ุจูุทู ูุงุฑุฌุน ููุญุงุถุฑ ุฏูู ุญูู."]
    if code=="ps":
        return ["<b>ุญู ุงููุดููุงุช</b>", "ุนุฑูู ุงููุดููุฉ โ ุจุฏุงุฆู โ ุฎุทุฉ ุตุบูุฑุฉ SMART โ ุฌุฑูุจ โ ูููู."]
    if code=="safe":
        return ["<b>ุณููููุงุช ุงูุฃูุงู</b>", "ูููู ุงูุทูุฃูุฉ ูุงูุชุฌูุจ ุชุฏุฑูุฌููุง ูุน ุชุนุฑูุถ ุขูู."]
    return ["ุชู."]

def cbt_send(chat_id, code):
    for t in cbt_text(code):
        send(chat_id, t, reply_kb())

# ========= ุชุซููู (ุงุถุทุฑุงุจุงุช ุดุงุฆุนุฉ) =========
EDU = {
    "ุงูููู ุงูุงุฌุชูุงุนู":
        "ุงูุฎูู ูู ุงูุชูููู ุงูุณูุจู. ุฌุฑูุจ ุงูุชุนุฑุถ ุงูุชุฏุฑูุฌู + ุฅุนุงุฏุฉ ููููุฉ ุงูุฃููุงุฑ.",
    "ุงูุงูุชุฆุงุจ":
        "ุงูุฎูุงุถ ุงููุฒุงุฌ ูููุฏุงู ุงููุชุนุฉ โฅ ุฃุณุจูุนูู. ุงูุชูุดูุท ุงูุณูููู ููู + ุฏุนู ุงุฌุชูุงุนู.",
    "ุงูุซูุฉ ุจุงูููุณ":
        "ุฃุนุฏ ุตูุงุบุฉ ุงูุญูุงุฑ ุงูุฏุงุฎููุ ุฑุงูู ุฅูุฌุงุฒุงุช ุตุบูุฑุฉ ูุชุฏุฑุฌุฉ.",
    "ุงูููู ุนูู ุงูุตุญุฉ":
        "ูุจุงูุบุฉ ูู ุชูุณูุฑ ุงูุฃุญุงุณูุณ ุงูุฌุณุฏูุฉ. ุฏููู ุงูุฏููู ูุน/ุถุฏ ูุงุณุชุดุฑ ุทุจูุจูุง ุนูุฏ ุงูุญุงุฌุฉ ููุท.",
    "ุงูููู":
        "ููู ููุฑุท ุตุนุจ ุงูุณูุทุฑุฉ โฅ 6 ุฃุดูุฑ ูุน ุฃุนุฑุงุถ ุชูุชุฑ. ุณุงุนุฏ ููุณู ุจุงูุชูููุณ ูุชูุธูู ุงูููู.",
    "ุงููุณูุงุณ ุงูููุฑู":
        "ุฃููุงุฑ/ุฏูุงูุน ูุชูุฑุฑุฉ ูุน ุฃูุนุงู ููุฑูุฉ. ุงูุนูุงุฌ ุงูููุถู: ุงูุชุนุฑุถ ูููุน ุงูุงุณุชุฌุงุจุฉ (ERP).",
    "ูุฑุจ ูุง ุจุนุฏ ุงูุตุฏูุฉ":
        "ุฐูุฑูุงุช ุงูุชุญุงููุฉ ูุชุฌูุจ ููุฑุท ููุธุฉ ุจุนุฏ ุญุฏุซ ุตุงุฏู. ููุถูู ุงูุนูุงุฌ ุงููุนุฑูู ุงูููุนุงูุฌ ููุตุฏูุฉ.",
    "ููุจุงุช ุงูููุน":
        "ุงูุฏูุงุน ููุงุฌุฆ ูู ุงูุฎูู ูุน ุฃุนุฑุงุถ ุฌุณุฏูุฉ. ุงูุชุนุฑูู ุนูููุง + ุชูููุณ ุจุทูุก + ุชุนุฑูุถ ุชุฏุฑูุฌู.",
}
def edu_menu(chat_id):
    rows=[]
    items=list(EDU.keys())
    for i in range(0,len(items),2):
        l=[{"text":items[i], "callback_data":"ed:"+items[i]}]
        if i+1<len(items): l.append({"text":items[i+1], "callback_data":"ed:"+items[i+1]})
        rows.append(l)
    send(chat_id, "ุงูุชุซููู ุงูููุณู:", inline(rows))

# ========= ุฌูุณุงุช ุณุฑูุนุฉ (ููู/ุญุฒู/ุชูููุณ) =========
THERAPY = {
    "sleep":
        "<b>ุจุฑูุชูููู ุงูููู ุงููุฎุชุตุฑ</b>\nโข ุซุจูุช ุงูุงุณุชููุงุธ ูููููุง\nโข ูููู ุงูุดุงุดุงุช ูุณุงุกู\nโข ุทููุณ ุชูุฏุฆุฉ 30-45ุฏ\n"
        "โข ุงูุณุฑูุฑ = ููู ููุท\nโข ูู ูุง ููุช ุฎูุงู 20ุฏ ุงุฎุฑุฌ ููุดุงุท ูุงุฏุฆ ูุงุฑุฌุน.",
    "sad":
        "<b>ุนูุงุฌ ุงูุญุฒู (ุชูุดูุท ุณูููู)</b>\nโข 3 ุฃูุดุทุฉ ุตุบูุฑุฉ ุงูููู (ููุชุน/ูุงูุน/ุงุฌุชูุงุนู)\nโข ุงุจุฏุฃ ุจู10-20ุฏ\nโข ูููู ุงููุฒุงุฌ ูุจู/ุจุนุฏ.",
    "breath":
        "<b>ุชูููุณ ููุฏูุฆ</b>\nุงุฌูุณ ูุธูุฑู ูุนุชุฏู: ุดููู 4 ุซูุงููุ ุญุจุณ 2ุ ุฒููุฑ 6 โ ูุฑุฑ 10 ูุฑุงุช ุจุจุทุก."
}

# ========= ุชุดุฎูุต ุชุนูููู (ูุณุงุฑ ูุจุณูุท) =========
DIAG = {}  # {uid: step}
def diag_start(chat_id, uid):
    DIAG[uid]=1
    send(chat_id,
         "ุชุดุฎูุต <b>ุชุนูููู</b> ูุจุณูุท (ููุณ ุชุดุฎูุตูุง ุทุจููุง).\n"
         "ุณูก) ูู ูุฑุฑุชู ุจููุจุงุช ููุน ููุงุฌุฆุฉ ูุชูุฑุฑุฉ ุขุฎุฑ ุดูุฑุ",
         inline([[{"text":"ูุนู","callback_data":"dx:y1"},{"text":"ูุง","callback_data":"dx:n1"}]]))

def diag_next(chat_id, uid, step, yes):
    if step==1:
        DIAG[uid]=2
        msg = "ุณูข) ุฎูุงู ุฃุณุจูุนูู ูุงุถููู: ูุฒุงุฌ ููุฎูุถ ุฃู ููุฏุงู ูุชุนุฉ ูุนุธู ุงูุฃูุงูุ"
        send(chat_id, msg, inline([[{"text":"ูุนู","callback_data":"dx:y2"},{"text":"ูุง","callback_data":"dx:n2"}]])); return
    if step==2:
        DIAG[uid]=3
        msg = "ุณูฃ) ููู ููุฑุท ุตุนุจ ุงูุณูุทุฑุฉ ุนููู ูุนุธู ุงูุฃูุงู ูุณุชุฉ ุฃุดูุฑ ูุน ุชูุชุฑ/ุฃุฑูุ"
        send(chat_id, msg, inline([[{"text":"ูุนู","callback_data":"dx:y3"},{"text":"ูุง","callback_data":"dx:n3"}]])); return
    if step==3:
        # ุชูุตูุฉ
        DIAG.pop(uid, None)
        rec=[]
        if yes.get(1): rec.append("โข ุฎุฐ <b>ุงุฎุชุจุงุฑ ููุจุงุช ุงูููุน (PDSS-SR)</b> ุซู ุฑุงุฌุน ุงูุชุซููู ุงูุฎุงุต ุจุงูููุน.")
        if yes.get(2): rec.append("โข ุฎุฐ <b>PHQ-9</b> (ุงูุชุฆุงุจ) ูุงุจุฏุฃ ุจุงูุชูุดูุท ุงูุณูููู.")
        if yes.get(3): rec.append("โข ุฎุฐ <b>GAD-7</b> (ููู) ูุฌุฑูุจ ุชูุงุฑูู ุงูุชูููุณ.")
        if not rec: rec.append("โข ูุชูุฌุชู ูุง ุชุดูุฑ ูููุท ูุญุฏุฏ ููุง. ุงุณุชุฎุฏู ูุงุฆูุฉ <b>ุงูุชุซููู</b> ูุงุฎุชุฑ ูุง ููุงุณุจู.")
        send(chat_id, "ุฎูุงุตุฉ ุชุนููููุฉ:\n" + "\n".join(rec), reply_kb())

# ========= ุงูุฐูุงุก ุงูุงุตุทูุงุนู =========
def ai_ready(): return bool(AI_BASE_URL and AI_API_KEY and AI_MODEL)
AI_SESS = {}  # {uid: messages}
SYSTEM_PROMPT = (
    "ุฃูุช ยซุนุฑุจู ุณุงูููยปุ ูุณุงุนุฏ ููุณู ุชุนูููู ุจุงูุนุฑุจูุฉ. "
    "ูุฏูู ุฏุนููุง ุนุงูููุง ูุชูููุงุช CBT ุงูุจุณูุทุฉ ูุชุซููููุง ููุฌุฒูุง. "
    "ูุง ุชูุฌุฑู ุชุดุฎูุตูุง ุทุจููุง ููุง ุชุนุทู ุชุนูููุงุช ุฏูุงุฆูุฉ. "
    "ุฅู ุธูุฑุช ูุคุดุฑุงุช ุฎุทุฑ (ุฅูุฐุงุก ุงูููุณ/ุงูุขุฎุฑูู) ูุฐููุฑ ุจุทูุจ ูุณุงุนุฏุฉ ููุฑูุฉ."
)

def ai_call(messages, max_tokens=220):
    url = AI_BASE_URL + "/v1/chat/completions"
    headers = {"Authorization": f"Bearer {AI_API_KEY}", "Content-Type":"application/json"}
    body = {"model": AI_MODEL, "messages": messages, "temperature": 0.4, "max_tokens": max_tokens}
    r = requests.post(url, headers=headers, json=body, timeout=30)
    if r.status_code == 402:
        # ุฑุตูุฏ ุบูุฑ ูุงูู
        raise RuntimeError("CREDITS:402")
    if r.status_code != 200:
        raise RuntimeError(f"AI {r.status_code}: {r.text[:300]}")
    data = r.json()
    return data["choices"][0]["message"]["content"].strip()

def ai_start(chat_id, uid):
    if not ai_ready():
        send(chat_id,
             "ููุฒุฉ ุงูุฐูุงุก ุงูุงุตุทูุงุนู ุบูุฑ ููุนููุฉ.\n"
             "ุฃุถู ุงูููุงุชูุญ: AI_BASE_URL / AI_API_KEY / AI_MODEL ุซู ุฃุนุฏ ุงููุดุฑ.",
             reply_kb()); return
    AI_SESS[uid] = [{"role":"system","content":SYSTEM_PROMPT}]
    send(chat_id,
         "ุจุฏุฃูุง ุฌูุณุฉ <b>ุนุฑุจู ุณุงููู</b> ๐ค\n"
         "ุงูุชุจ ุณุคุงูู ุนู ุงูููู/ุงูููู/CBTโฆ\n"
         "ูุฅููุงุก ุงูุฌูุณุฉ: ุงูุชุจ <code>ุงููุงุก</code>.",
         reply_kb())

def ai_handle(chat_id, uid, user_text):
    if crisis_guard(user_text):
        send(chat_id, "ุณูุงูุชู ุฃูู. ุฅู ุฑุงูุฏุชู ุฃููุงุฑ ูุฅูุฐุงุก ููุณู ูุงุชุตู ุจุงูุทูุงุฑุฆ ููุฑูุง ุฃู ุชุญุฏุซ ูุดุฎุต ููุซูู.", reply_kb()); return
    msgs = AI_SESS.get(uid) or [{"role":"system","content":SYSTEM_PROMPT}]
    msgs = msgs[-16:]
    msgs.append({"role":"user","content": user_text})
    # ูุญุงููุฉ ูุน ุชูููู ุงููุฏู ุฅู ูุฒู
    for mt in (220, 140, 96, 64):
        try:
            reply = ai_call(msgs, max_tokens=mt)
            msgs.append({"role":"assistant","content":reply})
            AI_SESS[uid] = msgs[-18:]
            send(chat_id, reply, reply_kb())
            return
        except RuntimeError as e:
            if "CREDITS:402" in str(e):
                continue  # ุฌุฑูุจ ุจูุฏู ุฃุตุบุฑ
            send(chat_id, f"ุชุนุฐููุฑ ุงูุงุชุตุงู ุจุงูุฐูุงุก ุงูุงุตุทูุงุนู.\n{e}", reply_kb())
            return
    send(chat_id,
         "ูุจุฏู ุฃู ุงูุฑุตูุฏ ููููุ ุญุงูู ุฑุณุงูุฉ ุฃูุตุฑ ุฃู ุงุดุญู ุฑุตูุฏ OpenRouter.\n"
         "ุชู ุชูููู ุทูู ุงูุฑุฏูุฏ ุชููุงุฆููุง.", reply_kb())

def ai_end(chat_id, uid):
    AI_SESS.pop(uid, None)
    send(chat_id, "ุชู ุฅููุงุก ุฌูุณุฉ ุนุฑุจู ุณุงููู โ", reply_kb())

# ========= ุงููุณุงุฑุงุช =========
@app.get("/")
def home():
    return jsonify({
        "app": "Arabi Psycho Telegram Bot",
        "public_url": RENDER_EXTERNAL_URL,
        "webhook": f"/webhook/{WEBHOOK_SECRET[:3]}*****",
        "ai_ready": ai_ready()
    })

@app.get("/setwebhook")
def set_hook():
    if not RENDER_EXTERNAL_URL:
        return jsonify({"ok": False, "error": "RENDER_EXTERNAL_URL not set"}), 400
    url = f"{RENDER_EXTERNAL_URL}/webhook/{WEBHOOK_SECRET}"
    res = requests.post(f"{BOT_API}/setWebhook", json={"url": url}, timeout=15)
    return res.json(), res.status_code

@app.post(f"/webhook/{WEBHOOK_SECRET}")
def webhook():
    upd = request.get_json(force=True, silent=True) or {}

    # === ุฃุฒุฑุงุฑ ูููุจุงู ===
    if "callback_query" in upd:
        cq = upd["callback_query"]; data = cq.get("data","")
        chat_id = cq["message"]["chat"]["id"]; uid = cq["from"]["id"]

        if data.startswith("t:"):
            key = data.split(":",1)[1]
            if key in TESTS: start_test(chat_id, uid, key)
            else: send(chat_id, "ุงุฎุชุจุงุฑ ุบูุฑ ูุนุฑูู.", reply_kb())
            return "ok", 200

        if data.startswith("a"):
            try:
                idx = int(data[1:])
                record_answer(chat_id, uid, idx)
            except: send(chat_id, "ุฅุฌุงุจุฉ ุบูุฑ ุตุงูุญุฉ.", reply_kb())
            return "ok", 200

        if data.startswith("c:"):
            code = data.split(":",1)[1]
            cbt_send(chat_id, code); return "ok", 200

        if data.startswith("ed:"):
            topic = data.split(":",1)[1]
            send(chat_id, f"<b>{topic}</b>\n{EDU.get(topic,'')}", reply_kb()); return "ok", 200

        if data.startswith("dx:"):
            # ุชุดุฎูุต ุชุนูููู
            ans = data.split(":",1)[1]
            step = int(ans[-1])
            yes = {"y":True,"n":False}[ans[0]]
            # ุฎุฒูู ุงูุฅุฌุงุจุงุช
            store = getattr(diag_next, "_ans", {})
            user = store.get(uid, {})
            user[step] = (ans[0]=="y")
            store[uid]=user
            setattr(diag_next, "_ans", store)
            diag_next(chat_id, uid, step, user)
            return "ok", 200

        return "ok", 200

    # === ุฑุณุงุฆู ===
    msg = upd.get("message") or upd.get("edited_message") or {}
    if not msg: return "ok", 200
    chat_id = msg["chat"]["id"]
    text = (msg.get("text") or "").strip()
    norm = text.replace("ุฃ","ุง").replace("ุฅ","ุง").replace("ุข","ุง").lower()
    uid = msg.get("from",{}).get("id")

    # ุฃูุงูุฑ ูุณุงุนุฏุฉ
    if is_cmd(text,"start"):
        send(chat_id, "ูุฑุญุจูุง! ููู ูุจุฏุฃ ุงููููุ ุฅููู ุจุนุถ ุงูุฎูุงุฑุงุช:\n"
                      "1) <b>ุงูุชุนุงูู ูุน ุงูููู:</b> ูุงูุด ููููู ูุณูุณุงุนุฏู ูู ุชุญููู ุงูุฃููุงุฑ.\n"
                      "2) <b>ุชุญุณูู ุงููุฒุงุฌ:</b> ุชูุงุฑูู ุณููููุฉ ุจุณูุทุฉ.\n\n" + ABOUT,
             reply_kb()); return "ok", 200
    if is_cmd(text,"menu"):
        send(chat_id, "ุงููุงุฆูุฉ:", reply_kb()); return "ok", 200
    if is_cmd(text,"help"):
        send(chat_id, HELP, reply_kb()); return "ok", 200
    if is_cmd(text,"tests"):
        tests_menu(chat_id); return "ok", 200
    if is_cmd(text,"cbt"):
        cbt_menu(chat_id); return "ok", 200
    if is_cmd(text,"whoami"):
        uid2 = msg.get("from",{}).get("id")
        send(chat_id, f"chat_id: {chat_id}\nuser_id: {uid2}", reply_kb()); return "ok", 200

    # ุฌูุณุฉ ุงูุฐูุงุก ุงูุงุตุทูุงุนู ูุดุทุฉุ
    if uid in AI_SESS and norm != "ุงููุงุก":
        ai_handle(chat_id, uid, text); return "ok", 200
    if uid in AI_SESS and norm == "ุงููุงุก":
        ai_end(chat_id, uid); return "ok", 200

    # ุฃุฒุฑุงุฑ ุงููุงุน ุจุงููุต
    if "ุงุฎุชุจุงุฑุงุช" in text:   tests_menu(chat_id); return "ok", 200
    if "ุงูุนูุงุฌ ุงูุณูููู" in text: cbt_menu(chat_id); return "ok", 200
    if "ุงูุชุซููู" in text:     edu_menu(chat_id); return "ok", 200
    if "ููู" == norm or text=="ููู":
        send(chat_id, THERAPY["sleep"], reply_kb()); return "ok", 200
    if "ุญุฒู" in text:
        send(chat_id, THERAPY["sad"], reply_kb()); return "ok", 200
    if "ุชููุณ" in norm or "ุชูููุณ" in text:
        send(chat_id, THERAPY["breath"], reply_kb()); return "ok", 200
    if text in ("ููู","ุงูุชุจ ููู"):
        send(chat_id, "ูุฅุฏุงุฑุฉ ุงูููู: ุฌุฑูุจ ุชูููุณ 4-7-8ุ ููุธูู ูููู. ุฎุฐ <b>GAD-7</b> ูู ยซุงุฎุชุจุงุฑุงุชยป.", reply_kb()); return "ok", 200
    if text in ("ุงูุชุฆุงุจ","ุงูุชุจ ุงูุชุฆุงุจ"):
        send(chat_id, "ูุชุญุณูู ุงููุฒุงุฌ: ุงูุชูุดูุท ุงูุณูููู + ุชูุงุตู ุงุฌุชูุงุนู. ุฎุฐ <b>PHQ-9</b> ูู ยซุงุฎุชุจุงุฑุงุชยป.", reply_kb()); return "ok", 200
    if "ุนุฑุจู ุณุงููู" in text and "ุนู" not in text:
        ai_start(chat_id, uid); return "ok", 200
    if "ุนู ุนุฑุจู ุณุงููู" in text:
        send(chat_id, ABOUT, reply_kb()); return "ok", 200
    if "ุชุดุฎูุต ุชุนูููู" in text:
        diag_start(chat_id, uid); return "ok", 200
    if "ูุณุงุนุฏุฉ" in text:
        send(chat_id, HELP + "\n\n" + ABOUT, reply_kb()); return "ok", 200
    if "ุชูุงุตู" in text:
        send(chat_id, "ุชู ุชุณุฌูู ุทูุจ ุชูุงุตู โ ุณูุฑุฌุน ูู ูุฑูุจูุง." + (f"\nุงููุงุชู: {CONTACT_PHONE}" if CONTACT_PHONE else ""), reply_kb())
        if ADMIN_CHAT_ID:
            user = msg.get("from", {})
            username = user.get("username") or (user.get("first_name","")+" "+user.get("last_name","")).strip() or "ูุณุชุฎุฏู"
            info = (f"๐ฉ <b>ุทูุจ ุชูุงุตู</b>\n"
                    f"๐ค {username} (id={uid})\n"
                    f"๐ฌ ุงูุฑุณุงูุฉ: {text}")
            send(ADMIN_CHAT_ID, info, reply_kb())
        return "ok", 200

    # ุงูุชุฑุงุถู: ุฑุฏ ุชุฑุญูุจู ุจุณูุท
    send(chat_id, "ุงูุชุจ ยซุงููุงุฆูุฉยป ุฃู ุงุณุชุฎุฏู ุงูุฃุฒุฑุงุฑ ุจุงูุฃุณูู.", reply_kb())
    return "ok", 200


# ====== ุชุดุบูู ูุญูู (ุงุฎุชูุงุฑู) ======
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
